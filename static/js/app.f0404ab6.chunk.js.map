{"version":3,"sources":["app/components/Keyboard.tsx","app/components/SourceLink.tsx","app/components/ScreenHeader.tsx","app/components/TextBlock.tsx","../../neuralnet/nnet.js","../../neuralnet/textnnet.js","app/GameScreen.tsx","app/components/HistoryChart.tsx","app/gameUtils.ts","app/constants/gameConstants.ts","App.tsx"],"names":["SpecialKeyboardKeys","styles","StyleSheet","create","container","position","right","top","subtitle","SourceLink","View","style","Fab","variant","onClick","Linking","openURL","ScreenHeader","Box","sx","width","textAlign","Typography","component","gutterBottom","TextBlockState","keySequence","row","flexDirection","marginBottom","cell","padding","paddingHorizontal","margin","borderRadius","borderWidth","borderColor","cellDisabled","text","color","fontSize","textDisabled","Keyboard","props","onKeyPress","disabledKeyList","map","rowIndex","key","isDisabled","includes","Pressable","disabled","onPress","Text","ColorMap","GUESS","CORRECT","POSSIBLE","INCORRECT","height","alignItems","justifyContent","fontWeight","TextBlock","state","backgroundColor","toUpperCase","NNEt","inputs","numberOfNodes","numberOfLayers","outputs","learningRate","randomInitialWeights","momentum","activationFunction","this","relu","sigmoid","layers","globalError","i","push","inputId","length","Node","layer","node","weights","bias","forEach","ii","expectedOutputs","error","lastInputs","allOutputs","activateAllLayers","previousLayersDeltas","Array","apply","nextLayersDelta","thisLayersInput","nodeDelta","outputDelta","train","delta","layerInputs","layerOutputs","fire","startingWeight","weight","previousAdjustments","correction","actualOutput","activation","weightAdjustment","activationDerivative","momentumAdjustment","Error","sum","random","Math","x","smaller","exp","fx","textInputs","nonTextInputs","outputChars","outputUpperCase","nonTextOutputs","nnetInputs","letterToNnInput","letter","letterMap","toLowerCase","getWeights","nnet","setWeights","noletter","a","b","c","d","e","f","g","h","j","k","l","m","n","o","p","q","r","s","t","u","v","w","y","z","indexToLetter","index","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","letterToIndex","letterToIndexMap","iii","totalOutputs","ti","nti","input","concat","rawResult","textResult","currentOutputChar","highestProbability","currentBestGuessOfLetter","nonTextOutput","result","expectedTextOutput","expectedNonTextOutput","parsedExpectedTextOutput","expectedOutput","textnnet","chartOptions","title","curveType","legend","historyData","chartData","chartType","data","options","BOARD_TEMPLATE","board","fill","getInitialBoard","wordList","fiveLetterWords","bottomContainer","flexGrow","GameScreen","useState","guessList","setGuessList","inputWord","setInputWord","weightSet","setWeightSet","setNnStatus","setActivationFunction","certainty","setCertainty","answerCertainty","setAnswerCertainty","floor","numberOfPossibleAnswers","setNumberOfPossibleAnswers","speed","setSpeed","setLayers","setLearningRate","setMomentum","nnGuess","setNnGuess","setNnBestValidGuess","setRandomGuess","gameOver","setGameOver","endGameOnGuessWithDisabledLetter","setEndGameOnGuessWithDisabledLetter","trainWithValidRandomGuess","setTrainWithValidRandomGuess","running","setRunning","trainingMode","setTrainingMode","gamesPlayed","setGamesPlayed","setCurrentWordIndex","turnsPlayed","setTurnsPlayed","turnsPlayedByAi","setTurnsPlayedByAi","nnError","setnnError","setTrainingList","scoreList","scoreHistory","setScoreHistory","gamesWon","setGamesWon","disabledLetters","setDisabledLetters","wordToGuess","useRef","wordToGuessIndex","useEffect","newWord","len","randomIndex","word","getRandomWord","current","sh","splice","guessLen","getExpectedOutput","list","split","slice","setTimeout","runNNet","useCallback","DELETE","prev","cw","gl","dl","flw","correctWord","console","log","disabledLettersInput","disabledLetter","presentLettersInput","correctLettersInput","guess","thisLetterindex","gameProgressInput","totalTurns","currentTurn","turnsArray","generateGameProgress","rawOutput","rawGuess","getHighestNumberIndex","nnBestGuess","invalid","includesDisabledLetter","trainingCount","randomWordLoop","randomWordIndex","randomInteger","newRandomWord","aDifferentResult","newGuessIndex","newGuessWord","window","onmessage","event","useMemo","output","line","char","colIndex","getWordleEmoji","rows","name","value","toFixed","Container","maxWidth","Grid","spacing","HistoryChart","item","md","Card","minWidth","CardContent","id","Divider","Slider","defaultValue","valueLabelDisplay","onChange","step","marks","min","max","FormControl","InputLabel","Select","label","target","MenuItem","Button","TextNNet","parseFloat","htmlFor","Input","display","accept","multiple","type","fileReader","FileReader","readAsText","files","onload","ws","receiveResult","JSON","parse","marginLeft","marginTop","noValidate","autoComplete","TextField","helperText","test","aria-label","FormControlLabel","control","Switch","defaultChecked","filename","element","document","createElement","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","download","stringify","TableContainer","Paper","Table","TableBody","TableRow","border","TableCell","scope","align","_","guessLetter","undefined","letterToShow","mh2","arrayOfNumbers","currentBestGuessOfIndex","number","numberOfOptions","activeResultIndex","expectedResult","stringArray","App","SafeAreaView"],"mappings":"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AAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IACzIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIlE,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClImE,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIvC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIwC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,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GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,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","file":"static/js/app.f0404ab6.chunk.js","sourcesContent":["import React from 'react';\nimport {Pressable, StyleSheet, Text, View} from 'react-native';\n\ninterface KeyboardProps {\n  onKeyPress(char: string): void;\n  disabledKeyList: string[];\n}\n\nexport enum SpecialKeyboardKeys {\n  DELETE = 'delete',\n  GUESS = 'guess',\n}\n\nconst keySequence: string[][] = [\n  ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n  ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n  ['Z', 'X', 'C', 'V', 'B', 'N', 'M'],\n  // [SpecialKeyboardKeys.DELETE, SpecialKeyboardKeys.GUESS],\n];\n\nconst Keyboard = (props: KeyboardProps) => {\n  const {onKeyPress, disabledKeyList} = props;\n\n  return (\n    <>\n      {keySequence.map((row, rowIndex) => {\n        return (\n          <View key={'key-row-' + rowIndex} style={styles.row}>\n            {row.map(key => {\n              const isDisabled = disabledKeyList.includes(key);\n              return (\n                <Pressable\n                  key={key}\n                  disabled={isDisabled}\n                  onPress={() => onKeyPress(key)}>\n                  <View\n                    style={[styles.cell, isDisabled && styles.cellDisabled]}>\n                    <Text\n                      style={[styles.text, isDisabled && styles.textDisabled]}>\n                      {key}\n                    </Text>\n                  </View>\n                </Pressable>\n              );\n            })}\n          </View>\n        );\n      })}\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n    marginBottom: 5,\n  },\n  cell: {\n    padding: 5,\n    paddingHorizontal: 8,\n    margin: 4,\n    borderRadius: 2,\n    borderWidth: 1,\n    borderColor: 'black',\n  },\n  cellDisabled: {\n    borderColor: 'gray',\n  },\n  text: {\n    color: 'black',\n    fontSize: 16,\n  },\n  textDisabled: {\n    color: 'gray',\n  },\n});\n\nexport default Keyboard;\n","import { Fab } from '@mui/material';\nimport React from 'react';\nimport {Linking, Platform, StyleSheet, Text, View} from 'react-native';\n\nconst HOME_URL = 'https://github.com/notseandavis/nnet';\n\nconst SourceLink = () => {\n  return (\n    <View style={styles.container}>\n      <Fab variant=\"extended\" onClick={() => Linking.openURL(HOME_URL)}>\n        github\n      </Fab>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    right: 20,\n    top: 16,\n  },\n  subtitle: {\n    // color: '#5998c5',\n    // fontWeight: '400',\n    // fontSize: 16,\n  },\n});\n\nexport default SourceLink;\n","import { Box, Typography } from '@mui/material';\nimport React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nconst ScreenHeader = () => {\n  return (\n    <Box sx={{ width: '100%', textAlign: \"center\"}}>\n      <Typography variant=\"h4\" component=\"div\" gutterBottom>\n        wordle ai\n      </Typography>\n    </Box>\n  );\n};\n\nconst styles = StyleSheet.create({\n\n});\n\nexport default ScreenHeader;\n","import React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nexport enum TextBlockState {\n  GUESS = 'guess',\n  CORRECT = 'correct',\n  POSSIBLE = 'possible',\n  INCORRECT = 'incorrect',\n}\n\nconst ColorMap: Record<TextBlockState, string> = {\n  [TextBlockState.GUESS]: 'transparent',\n  [TextBlockState.CORRECT]: '#76b041',\n  [TextBlockState.POSSIBLE]: '#FFC914',\n  [TextBlockState.INCORRECT]: '#8b939c',\n};\n\ninterface TextBlockProps {\n  text: string;\n  state: TextBlockState;\n}\n\nconst TextBlock = (props: TextBlockProps) => {\n  const {text, state} = props;\n\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: ColorMap[state],\n        },\n      ]}>\n      <Text style={styles.text}>{text.toUpperCase()}</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: 40,\n    height: 40,\n    borderWidth: 1,\n    borderRadius: 4,\n    borderColor: 'white',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 16,\n    color: '#fff',\n    fontWeight: 'bold',\n  },\n});\n\nexport default TextBlock;\n","// FYI, this is a mess, with too much one-off stuff just to make it work\nexport default class NNEt {\n    constructor(inputs, numberOfNodes, numberOfLayers, outputs = 1, learningRate = 0.3, randomInitialWeights = false, momentum = 0.001, activationFunction = \"sigmoid\") {\n        // array of inputs\n        this.inputs = inputs;\n        // e.x. [[1], [2], [1]]\n        // the number inside the innner arrays represents the number of inputs for each input node\n\n        // Number of outputs, each output has only one output value (which will always be a number between 0.0 and 1.0)\n        this.outputs = outputs;\n        \n        // number of nodes in hidden layer(s)\n        this.numberOfNodes = numberOfNodes;\n\n        // number of hidden layers\n        this.numberOfLayers = numberOfLayers;\n\n        // which activation function to use\n        if (activationFunction === \"relu\") {\n            this.activationFunction = relu;\n        } else {\n            this.activationFunction = sigmoid;\n        }\n\n        // Learning rate\n        this.learningRate = learningRate;\n\n        this.momentum = momentum;\n        \n        // Randomize initial weights\n        this.randomInitialWeights = randomInitialWeights;\n        \n        // Here is our array of layers\n        this.layers = [];\n\n        this.globalError = 0;\n\n        // Layer Index\n        let i = 0;\n        \n        // Input layer\n        this.layers.push([]);\n        let inputId = 0;\n        while (this.layers[i].length < inputs.length) {\n            this.layers[i].push(new Node(inputs[inputId][0], this.randomInitialWeights, this.activationFunction));\n            inputId++;\n        }\n        i++;\n        \n        // Middle layer(s)\n        while (this.layers.length < numberOfLayers) {\n            this.layers.push([]);\n            if (i === 1) {\n                // Layer below the input layer, gets the number of input\n                while (this.layers[i].length < this.numberOfNodes) {\n                    this.layers[i].push(new Node(inputs.length, this.randomInitialWeights, this.activationFunction)); \n                }\n            } else {\n                // Any middle layer\n                while (this.layers[i].length < this.numberOfNodes) {\n                    this.layers[i].push(new Node(this.numberOfNodes, this.randomInitialWeights, this.activationFunction)); \n                }\n            }\n            i++;\n        }\n\n        // Output layer\n        this.layers.push([]);\n        while (this.layers[i].length < this.outputs) {\n            if (this.layers.length > 2) {\n                // There are middle layers, take the number of nodes as the number of inputs\n                this.layers[i].push(new Node(this.numberOfNodes, this.randomInitialWeights, this.activationFunction));\n            } else {\n                // No middle layers, take the input nodes directly\n                this.layers[i].push(new Node(inputs.length, this.randomInitialWeights, this.activationFunction)); \n            }\n        }\n    }\n    \n    // Get all the weights of the network\n    getWeights() {\n        return this.layers.map(layer => {\n            return layer.map(node => {\n                return { weights: node.weights, bias: node.bias };\n            });\n        });\n    }\n\n    // Set all the weights in the network\n    setWeights(weights) {\n        this.layers.forEach((layer, i) => {\n            layer.forEach((node, ii) => {\n                node.weights = weights[i][ii].weights;\n                node.bias = weights[i][ii].bias;\n            });\n        });\n    }\n\n    // TODO: Clean this up\n    // Train the network using inputs (or last inputs if not previously provided) and expected outputs\n    train(inputs, expectedOutputs) {\n        let error = 0;\n        // console.log(\"training nnet\")\n        if (!inputs) {\n            inputs = this.lastInputs;\n        }\n        let allOutputs = this.activateAllLayers(inputs);\n\n        // Creating an array in the shape of our network so we can store the deltas\n        let previousLayersDeltas = Array.apply(null, Array(this.layers.length)).map(function () { return []; });\n        \n        // get the delta from the bottom layer, \n        // and walk backwards through the layers\n        for (let i = this.layers.length - 1; i >= 0; i--) {\n            for (let ii = (this.layers[i].length - 1); ii >= 0; ii--) {\n                let nextLayersDelta = 0\n                // this layer's input is either the previous layer's output, or the original input\n                let thisLayersInput = i === 0 ? inputs[ii] : allOutputs[i - 1];\n                \n                // Delta for this node\n                let nodeDelta = 0;\n                if (i === this.layers.length - 1) {\n                    // this is the output layer, so we use the expected output for this node\n                    let outputDelta = (expectedOutputs[ii] - allOutputs[i][[ii]])\n                    nodeDelta = outputDelta;\n                    nextLayersDelta = this.layers[i][ii].train(thisLayersInput, nodeDelta, this.learningRate, this.momentum);\n                } else {\n                    // this is some middle or input layer, add up the previous layers together as they all connect together\n                    previousLayersDeltas[i + 1].forEach(delta => { \n                        nodeDelta = delta; \n                        nextLayersDelta += this.layers[i][ii].train(thisLayersInput, nodeDelta, this.learningRate, this.momentum);\n                    });\n                }\n                previousLayersDeltas[i].push(nextLayersDelta)\n                error = error + nextLayersDelta;\n            }\n        }\n        this.globalError = error;\n    }\n\n    activateAllLayers(inputs) {\n        let layerInputs;\n        let layerOutputs = [];\n        this.layers.forEach((layer, i) => {\n            layerOutputs.push([]);\n            layer.forEach((node, ii) => {\n                if (i === 0) {\n                    // Send the set of inputs for the input layer\n                    layerOutputs[i].push(node.fire(inputs[ii]));\n                } else {\n                    // Otherwise, send the output from the previous layer\n                    layerOutputs[i].push(node.fire(layerInputs));\n                }\n            });\n            // inputs for the next layer are outputs from this layer\n            layerInputs = layerOutputs[i];\n        });\n        // final layer has only one output\n        return layerOutputs;\n    }\n    fire(inputs) {\n        this.lastInputs = inputs;\n        let allOutputs = this.activateAllLayers(inputs);\n        // return the final output layer\n        return allOutputs[this.layers.length - 1]\n    }\n}\n\nclass Node {\n    constructor(inputs, randomInitialWeights, activationFunction) {\n        // number of inputs\n        this.inputs = inputs;\n        this.weights = Array.apply(null, Array(inputs)).map(function () { return startingWeight(randomInitialWeights); });\n        this.activationFunction = activationFunction;\n        \n        // Try to initialize a neutral bias\n        let bias = 0;\n        this.weights.forEach(weight => {\n            if (weight > 0) {\n                bias = bias - weight;\n            } else {\n                bias = bias + weight;\n            }\n        });\n        this.bias = bias;\n        this.previousAdjustments = Array.apply(null, Array(inputs)).map(function () { return startingWeight(randomInitialWeights); });\n    }\n    // inputs = [];\n\n    train(inputs, correction, learningRate, momentum) {\n        let actualOutput = activation(inputs, this.weights, this.bias)\n\n        \n        for (let i = 0; i < inputs.length; i++) {\n            let weightAdjustment = correction * activationDerivative(actualOutput, learningRate, this.activationFunction) * inputs[i];\n            let momentumAdjustment = this.previousAdjustments[i] * momentum;\n            this.previousAdjustments[i] = weightAdjustment;\n            this.weights[i] += weightAdjustment + momentumAdjustment;\n        }\n        this.bias = this.bias + learningRate * correction;\n        return correction * activationDerivative(actualOutput, learningRate, this.activationFunction);\n    }\n    fire(inputs) {\n        if (inputs.length > this.weights.length) {\n            throw new Error(\"too many inputs\");\n        }\n        let sum = activation(inputs, this.weights, this.bias)\n        let output = this.activationFunction(sum);\n        return output;\n    }\n}\n\nfunction startingWeight(random) {\n    return random ? Math.random() : 0;\n}\nfunction sigmoid(x) {\n    if (x > 36) {\n        return 0.9999999999999999;\n    }\n    if (x < -36) {\n        return 0.0000000000000001;\n    }\n    let smaller = x;\n    return 1 / (1 + Math.exp(-smaller));\n} \n\nfunction relu(x) {\n    if (x > 0) {\n        return x;\n    } else {\n        return 0;\n    }\n}\n\nfunction activationDerivative(x, learningRate, activationFunction) {\n    const fx = activationFunction(x);\n    return fx * (1 + learningRate - fx);\n}\n\nfunction activation(inputs, weights, bias) {\n    let sum = 0;\n    for (let i = 0; i < inputs.length; i++) {\n        sum += weights[i] * inputs[i]\n    }\n    return sum += bias;\n}","\nimport NNEt from \"./nnet\";\n\n// Work in progress, not usable...\nexport default class TextNNet {\n    constructor(textInputs, nonTextInputs, outputChars = 0, outputUpperCase, nonTextOutputs, layers, learningRate, momentum, activationFunction) {\n        // array of inputs\n        this.nonTextInputs = nonTextInputs;\n        this.textInputs = textInputs;\n        this.nnetInputs = [];\n        this.outputChars = outputChars;\n        this.outputUpperCase = outputUpperCase;\n        this.letterToNnInput = function(letter) {\n            return this.letterMap[letter.toLowerCase()];\n        };\n        this.getWeights = function() {\n            return this.nnet.getWeights();\n        };\n        this.setWeights = function(weights) {\n            this.nnet.setWeights(weights);\n        }\n        this.letterMap = {\n            noletter: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            a: [[1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            b: [[0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            c: [[0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            d: [[0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            e: [[0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            f: [[0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            g: [[0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            h: [[0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            i: [[0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            j: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            k: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            l: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            m: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            n: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            o: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            p: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            q: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            r: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0]],\n            s: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0]],\n            t: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0]],\n            u: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0]],\n            v: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0]],\n            w: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0]],\n            x: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0]],\n            y: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0]],\n            z: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1]]\n        }\n        this.indexToLetter = function(index) {\n            let map = { \n                0: \"a\",\n                1: \"b\",\n                2: \"c\",\n                3: \"d\",\n                4: \"e\",\n                5: \"f\",\n                6: \"g\",\n                7: \"h\",\n                8: \"i\",\n                9: \"j\",\n                10: \"k\",\n                11: \"l\",\n                12: \"m\",\n                13: \"n\",\n                14: \"o\",\n                15: \"p\",\n                16: \"q\",\n                17: \"r\",\n                18: \"s\",\n                19: \"t\",\n                20: \"u\",\n                21: \"v\",\n                22: \"w\",\n                23: \"x\",\n                24: \"y\",\n                25: \"z\"\n            };\n            return this.outputUpperCase ? map[index].toUpperCase() : map[index]; \n        }\n        this.letterToIndex = function(letter) {\n            letter = letter.toLowerCase();\n            return this.letterToIndexMap[letter];\n        }\n        this.letterToIndexMap = {\n            a: 0,\n            b: 1,\n            c: 2,\n            d: 3,\n            e: 4,\n            f: 5,\n            g: 6,\n            h: 7,\n            i: 8,\n            j: 9,\n            k: 10,\n            l: 11,\n            m: 12,\n            n: 13,\n            o: 14,\n            p: 15,\n            q: 16,\n            r: 17,\n            s: 18,\n            t: 19,\n            u: 20,\n            v: 21,\n            w: 22,\n            x: 23,\n            y: 24,\n            z: 25\n        }\n        for (let i = 0; i < textInputs.length; i++) {\n            for (let ii = 0; ii < textInputs[i]; ii++) {\n\n                for (let iii = 0; iii < 26; iii++) {\n                    this.nnetInputs.push([1]);\n                }\n                // this.nnetInputs.push([26]);\n            }\n        }\n        for (let i = 0; i < nonTextInputs.length; i++) {\n            this.nnetInputs.push(nonTextInputs[i]);\n        }\n        let totalOutputs = 0;\n        if (outputChars && outputChars > 0) {\n            totalOutputs = totalOutputs + outputChars * 26;\n        }\n        if (nonTextOutputs && nonTextOutputs > 0) {\n            totalOutputs = totalOutputs + nonTextOutputs;\n        }\n        this.nnet = new NNEt(this.nnetInputs, this.nnetInputs.length, layers, totalOutputs, learningRate, false, momentum, activationFunction);\n        \n        // nti = non text inputs\n        this.fire = function(ti, nti) {\n            let input = [];\n            for (let i = 0; i < ti.length; i++) {\n                for (let ii = 0; ii < ti[i].length; ii++) \n                {\n                    input.push(...this.letterToNnInput(ti[i][ii]));\n                }\n            }\n            input = input.concat(nti);\n            let rawResult = this.nnet.fire(input);\n            let textResult = \"\";\n            let currentOutputChar = 0;\n            let i = 0;\n            let highestProbability = 0;\n            let currentBestGuessOfLetter = null;\n            let nonTextOutput = [];\n            rawResult.forEach(result => {\n                if (currentOutputChar < this.outputChars) {\n                    if (result > highestProbability) {\n                        highestProbability = result;\n                        currentBestGuessOfLetter = this.indexToLetter(i);\n                    }\n                    if (i == 25) {\n                        i = 0;\n                        textResult = textResult + currentBestGuessOfLetter;\n                        highestProbability = 0;\n                        currentOutputChar++;\n                    } else {\n                        i++;\n                    }\n                } else {\n                    nonTextOutput.push(result);\n                }\n            });\n            return {\n                text: this.outputUpperCase ? textResult.toUpperCase() : textResult,\n                nonTextOutputs: nonTextOutput\n            };\n        }\n\n        this.train = function(ti = null, nti = null, expectedTextOutput = \"\", expectedNonTextOutput = []) {\n            let input = null;\n            if (ti != null && nti != null) {\n                input = [];\n                for (let i = 0; i < ti.length; i++) {\n                    for (let ii = 0; ii < ti[i].length; ii++) \n                    {\n                        input.push(...this.letterToNnInput(ti[i][ii]));\n                    }\n                }\n                input = input.concat(nti);\n            }\n\n            expectedTextOutput = expectedTextOutput ? expectedTextOutput.toLowerCase() : \"\";\n            let parsedExpectedTextOutput = [];\n            for (let i = 0; i < expectedTextOutput.length; i++) {\n                parsedExpectedTextOutput.push(...this.letterMap[expectedTextOutput[i]]);\n            }\n            let expectedOutput = [...parsedExpectedTextOutput, ...expectedNonTextOutput]\n            this.nnet.train(input, expectedOutput);\n        }\n\n    }\n}\n\nfunction blankLetter() { return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; }\nfunction text(length) { \n    let text = [];\n    for (let i = 0; i < length; i++) {\n        text.push(blankLetter());\n    }\n    return text;\n}","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { StyleSheet, Text, View, Clipboard, Platform, TextInputComponent } from 'react-native';\n// import Button from './components/Button';\nimport Keyboard, { SpecialKeyboardKeys } from './components/Keyboard';\nimport TextBlock, { TextBlockState } from './components/TextBlock';\nimport { MAX_GUESSES, MAX_WORD_LEN } from './constants/gameConstants';\nimport { getInitialBoard, getRandomWord, getWordleEmoji } from './gameUtils';\nimport TextNNet from '../../../neuralnet/textnnet';\nimport fiveLetterWords from './constants/fiveLetterWords.json';\nimport { Button, FormGroup, Switch, FormControlLabel, Box, Container, TableContainer, Table, TableCell, TableRow, Paper, TableBody, TableHead, Grid, Slider, Typography, TextField, Divider, Card, CardContent, InputLabel, MenuItem, Select, FormControl, Input, styled } from '@mui/material';\nimport { Chart } from \"react-google-charts\";\nimport HistoryChart from './components/HistoryChart';\n\nconst BOARD_TEMPLATE = getInitialBoard();\nlet textnnet: TextNNet;\nlet wordList = fiveLetterWords;\n\nconst GameScreen = () => {\n  const [guessList, setGuessList] = useState<string[]>([]);\n  const [inputWord, setInputWord] = useState<string>('');\n  const [weightSet, setWeightSet] = useState<string>('');\n  const [firstGuess, setFirstGuess] = useState<string>('');\n  const [nnStatus, setNnStatus] = useState<string>('');\n  const [activationFunction, setActivationFunction] = useState<string>('sigmoid');\n  const [certainty, setCertainty] = useState<number>(0);\n  const [answerCertainty, setAnswerCertainty] = useState<number>(0);\n  const [numberOfPossibleAnswers, setNumberOfPossibleAnswers] = useState<number>(Math.floor(fiveLetterWords.length / 2));\n  const [randomGuesses, setRandomGuesses] = useState<number>(0);\n  const [timesToTrainWithValidWord, setTimesToTrainWithValidWord] = useState<number>(1);\n  const [speed, setSpeed] = useState<number>(0);\n  const [layers, setLayers] = useState<number>(0);\n  const [learningRate, setLearningRate] = useState<string>(\"0.005\");\n  const [momentum, setMomentum] = useState<string>(\"0.001\");\n  const [nnGuess, setNnGuess] = useState<string>('');\n  const [nnBestValidGuess, setNnBestValidGuess] = useState<string>('');\n  const [randomGuess, setRandomGuess] = useState<string>('');\n  const [gameOver, setGameOver] = useState<boolean>(false);\n  const [endGameOnGuessWithDisabledLetter, setEndGameOnGuessWithDisabledLetter] = useState<boolean>(false);\n  const [hardMode, setHardMode] = useState<boolean>(false);\n  const [trainWithValidRandomGuess, setTrainWithValidRandomGuess] = useState<boolean>(false);\n  const [running, setRunning] = useState<boolean>(false);\n  // const [expectedResult, setExpectedResult] = useState<number[]>([]);\n  const [trainingMode, setTrainingMode] = useState<boolean>(true);\n  const [gamesPlayed, setGamesPlayed] = useState<number>(0);\n  const [currentWordIndex, setCurrentWordIndex] = useState<number>(0);\n  const [turnsPlayed, setTurnsPlayed] = useState<number>(0);\n  const [turnsPlayedByAi, setTurnsPlayedByAi] = useState<number>(0);\n  const [nnError, setnnError] = useState<number>(0);\n  const [originalWeights, setOriginalWeights] = useState<object>({});\n  const [trainingList, setTrainingList] = useState<(number[][] | string[][])[]>([]);\n  const [scoreList, setScoreList] = useState<[number, string][]>([]);\n  const [scoreHistory, setScoreHistory] = useState<[number, number, number][]>([[0, 0, 0]]);\n\n\n\n  const [gamesWon, setGamesWon] = useState<number>(0);\n  const [disabledLetters, setDisabledLetters] = useState<string[]>([]);\n\n  const wordToGuess = useRef<string>('xxxxx');\n  const wordToGuessIndex = useRef<number>(0);\n\n  useEffect(() => {\n    if (gameOver === false) {\n      const newWord = getRandomWord(wordList);\n      wordToGuess.current = newWord.word;\n      wordToGuessIndex.current = newWord.index\n      setCurrentWordIndex(newWord.index);\n      // setExpectedResult(getExpectedOutput(disabledLetters, wordList, wordList.length, newWord.index));\n      setInputWord('');\n      setGuessList([]);\n      setGamesPlayed(gamesPlayed + 1);\n    } else {\n      let sh: [number, number, number][];\n      sh = [...scoreHistory]\n      if (scoreHistory.length > 50) {\n        sh.splice(0, 1);\n      }\n      sh.push([gamesPlayed, certainty, answerCertainty]);\n      setScoreHistory(sh);\n    }\n    if (running) {\n      setGameOver(false)\n    }\n  }, [gameOver]);\n\n\n  useEffect(() => {\n    const guessLen = guessList.length;\n    if (guessList[guessLen - 1] === wordToGuess.current) {\n      // if (trainingMode) {\n      //   // trainingList.forEach((trainingData => {\n      //   //   textnnet.train(trainingData[0], trainingData[1], null, expectedResult);\n      //   // }));\n      //   textnnet.train(null, null, null, getExpectedOutput(disabledLetters, wordList, wordList.length, wordToGuessIndex.current));\n      //   setnnError(textnnet.nnet.globalError);\n\n      // }\n      setTrainingList([]);\n      setGameOver(true);\n\n    } else if (guessLen === MAX_GUESSES || guessList[guessLen - 1] === \"\") {\n      if (trainingMode && textnnet) {\n        textnnet.train(null, null, null, getExpectedOutput(disabledLetters, wordList, wordList.length, wordToGuessIndex.current));\n        setnnError(textnnet.nnet.globalError);\n      }\n      setTrainingList([]);\n      setGameOver(true);\n    } else {\n      const list: string[] = [];\n\n      guessList.forEach(word => {\n        word.split('').forEach(letter => {\n          // console.log({letter});\n          if (!wordToGuess.current.includes(letter)) {\n            list.push(letter);\n          }\n        });\n      });\n\n      setDisabledLetters(list);\n    }\n\n    const list: string[] = [];\n\n  }, [guessList])\n\n  useEffect(() => {\n    wordList = fiveLetterWords.slice(0, numberOfPossibleAnswers)\n  }, [numberOfPossibleAnswers])\n\n  useEffect(() => {\n    // fire the next turn when disabled letters are reset\n    setTurnsPlayed(turnsPlayed + 1);\n    setTimeout(() => {\n      runNNet(wordToGuess.current, guessList, disabledLetters, wordList);\n    }, speed)\n    // window.postMessage('start nnet');\n  }, [disabledLetters])\n\n  // useEffect(() => {\n  // }, [turnsPlayed]);\n\n  const onKeyPress = useCallback(\n    (key: string) => {\n\n      if (key === SpecialKeyboardKeys.DELETE) {\n        setInputWord(prev => prev.slice(0, -1));\n      } else if (key === SpecialKeyboardKeys.GUESS) {\n        setGuessList(prev => [...prev, inputWord.toUpperCase()]);\n        setInputWord('');\n      } else if (key.length === 1) {\n        setInputWord(prev => {\n          if (prev.length < MAX_WORD_LEN && !disabledLetters.includes(key)) {\n            return prev + key;\n          }\n          return prev;\n        });\n      }\n    },\n    [disabledLetters, inputWord],\n  );\n\n  const runNNet = (cw: string, gl: string[], dl: string[], flw: string[]) => {\n    if (!running || !textnnet) {\n      return;\n    }\n\n    let correctWord = cw.split(\"\");\n    console.log(\"running...\")\n    let disabledLettersInput = new Array<number[]>();\n    for (let i = 0; i < 26; i++) {\n      disabledLettersInput.push([0]);\n    }\n\n    for (let i = 0; i < dl.length; i++) {\n      let disabledLetter = dl[i];\n      let disabledLetterIndex = textnnet.letterToIndex(disabledLetter);\n      disabledLettersInput[disabledLetterIndex] = [1];\n    }\n\n    let presentLettersInput = new Array<Array<number>[]>();\n    let correctLettersInput = new Array<string>();\n\n    // for (let i = 0; i < 26; i++) {\n    //   presentLettersInput.push([0]);\n    // }\n    for (let i = 0; i < 5; i++) {\n      correctLettersInput.push(\"noletter\");\n      presentLettersInput.push([]);\n      for (let j = 0; j < 26; j++) {\n        presentLettersInput[i].push([0]);\n      }\n\n    }\n    let presentLetters: string[][] = [];\n\n\n    gl.forEach((guess: string, i) => {\n      for (let ii = 0; ii < guess.length; ii++) {\n        const thisLetterindex = textnnet.letterToIndex(guess[ii]);\n\n        if (correctWord.includes(guess[ii])) {\n          // presentLetters.push([guess[ii]]);\n          if (guess[ii] === correctWord[ii]) {\n            correctLettersInput[ii] = guess[ii];\n          } else {\n            presentLettersInput[i][thisLetterindex] = [1];\n          }\n        }\n      }\n    });\n\n    let gameProgressInput = generateGameProgress(6, guessList.length);\n\n    let input = [[correctLettersInput], [...gameProgressInput, ...disabledLettersInput, ...presentLettersInput[0], ...presentLettersInput[1], ...presentLettersInput[2], ...presentLettersInput[3], ...presentLettersInput[4]]];\n\n    // setTrainingList(prev => [...prev, input]);\n\n    let timesTrained = 0;\n    setNnStatus(\"Playing...\");\n\n    setRandomGuess(\"\");\n    setNnBestValidGuess(\"\");\n\n    setNnGuess(\"\");\n\n    let rawOutput = textnnet.fire(input[0], input[1]).nonTextOutputs;\n\n\n\n    // Best overall guess from NN\n    let rawGuess = getHighestNumberIndex(rawOutput);\n    setCertainty(rawGuess.certainty);\n    setAnswerCertainty(rawOutput[wordToGuessIndex.current]);\n    let nnBestGuess: string = flw[rawGuess.index].toUpperCase();\n    // let sl = getScoresWithWords(rawOutput, flw);\n    // setScoreList(sl);\n    let turnPlayedByAi = true;\n    let invalid: string = \"\";\n\n    if (includesDisabledLetter(dl, nnBestGuess) && (endGameOnGuessWithDisabledLetter || trainWithValidRandomGuess)) {\n      invalid = \"(invalid)\";\n      // If the very best guess is not valid, do some stuff\n      if (endGameOnGuessWithDisabledLetter) {\n        // If we are supposed to end the game when a disabled letter is guessed, end it.\n        setGuessList(prev => [...prev, \"\"]);\n      } else if (trainWithValidRandomGuess) {\n\n        let trainingCount = 0;\n        // let aDifferentResult = getExpectedOutput(wordList.length, bestValidGuessIndex);\n\n\n        let newResult = \"\";\n        let randomWordLoop = () => {\n          let randomWordIndex = randomInteger(0, flw.length - 1);\n          let newRandomWord = flw[randomWordIndex].toUpperCase();\n          while (includesDisabledLetter(dl, newRandomWord)) {\n            randomWordIndex = randomInteger(0, flw.length - 1);\n            newRandomWord = flw[randomWordIndex].toUpperCase();\n          }\n\n          setRandomGuess(newRandomWord);\n\n          let aDifferentResult = getExpectedOutput(dl, flw, flw.length, -1);\n          textnnet.train(null, null, null, aDifferentResult);\n          setnnError(textnnet.nnet.globalError);\n          let newGuessRawOutput = textnnet.fire(input[0], input[1]).nonTextOutputs;\n          let newGuessIndex = getHighestNumberIndex(newGuessRawOutput).index;\n          let newGuessWord = flw[newGuessIndex].toUpperCase();\n\n          if (includesDisabledLetter(dl, newGuessWord) && trainingCount < 1) {\n            trainingCount++;\n            setTimeout(randomWordLoop, speed);\n          } else {\n            setGuessList(prev => [...prev, newRandomWord]);\n          }\n        }\n        randomWordLoop();\n      }\n\n    } else {\n      if (nnBestGuess === wordToGuess.current) {\n        setGamesWon(gamesWon + 1);\n      }\n\n      if (guessList.length > 0) {\n        setTurnsPlayedByAi(turnsPlayedByAi + 1);\n      }\n      setGuessList(prev => [...prev, nnBestGuess]);\n    }\n    setNnGuess(nnBestGuess + invalid)\n\n  };\n\n  const callback = (event: MessageEvent) => {\n    if (event.data == 'start nnet') {\n      runNNet(wordToGuess.current, guessList, disabledLetters, wordList);\n    }\n  };\n\n  window.onmessage = callback;\n\n  const wordleEmoji: string = useMemo(() => {\n    if (!gameOver) {\n      return '';\n    }\n\n    return getWordleEmoji(wordToGuess.current, guessList);\n  }, [gameOver, guessList]);\n  const scores = scoreList.slice(0, 10);\n  const rows = [\n    {\n      name: \"Possible Answers\",\n      value: numberOfPossibleAnswers\n    },\n    {\n      name: \"Best Guess\",\n      value: nnGuess\n    },\n    {\n      name: \"Best Guess Certainty\",\n      value: certainty.toFixed(5)\n    },\n    {\n      name: \"Answer\",\n      value: wordToGuess.current\n    },\n    // {\n    //   name: \"Score of answer\",\n    //   value: scoreHistory[scoreHistory.length - 1]?\n    // },\n    {\n      name: \"Turns Played\",\n      value: turnsPlayed\n    },\n    {\n      name: \"Games Played\",\n      value: gamesPlayed\n    },\n    {\n      name: \"Games Won\",\n      value: gamesWon\n    },\n    {\n      name: \"Win Ratio\",\n      value: (Math.floor((gamesWon / gamesPlayed) * 100) / 100).toFixed(5)\n    },\n    {\n      name: \"Neural Net Error\",\n      value: nnError.toFixed(5)\n    }\n  ];\n\n  return (\n    <Box>\n      <Container maxWidth=\"lg\">\n        <Grid container spacing=\"2\">\n\n          <HistoryChart historyData={scoreHistory} />\n          <Grid item md={6}>\n\n            {(!running && weightSet !== \"exporting\") && <>\n              <Card sx={{ minWidth: 275 }}>\n                <CardContent>\n\n                  <Typography variant=\"h5\">\n                    Neural Network Options\n                  </Typography>\n                  <br></br>\n                  <Typography id=\"non-linear-slider\" gutterBottom>\n                    (you can't change these later)\n                  </Typography>\n                  <Divider></Divider>\n                  <Typography id=\"non-linear-slider\" gutterBottom>\n                    Middle Layers:\n                  </Typography>\n\n                  <Slider\n                    disabled={textnnet}\n                    defaultValue={layers}\n                    value={layers}\n                    // getAriaValueText={}\n                    valueLabelDisplay=\"auto\"\n                    onChange={(e, value) => {\n                      setLayers(value)\n                    }}\n                    step={1}\n                    marks\n                    min={0}\n                    max={10}\n                  />\n\n                  <Typography id=\"non-linear-slider\" gutterBottom>\n                    Number of answers:\n                  </Typography>\n\n                  <Slider\n                    // disabled={textnnet}\n                    // defaultValue={numberOfPossibleAnswers}\n                    value={numberOfPossibleAnswers}\n                    // getAriaValueText={}\n                    valueLabelDisplay=\"auto\"\n                    onChange={(e, value) => {\n                      setNumberOfPossibleAnswers(value);\n                    }}\n                    step={1}\n                    // marks\n                    min={1}\n                    max={fiveLetterWords.length}\n                  />\n                  <FormControl sx={{\n                    m: 3, minWidth: 200\n                  }}>\n                    <InputLabel id=\"demo-simple-select-label\">Activation Function</InputLabel>\n                    <Select\n                      // labelId=\"demo-simple-select-label\"\n                      id=\"activation-function\"\n                      value={activationFunction}\n                      label=\"Activation Function\"\n                      onChange={(e) => {\n                        setActivationFunction(e.target.value);\n                      }}\n                    >\n                      <MenuItem value={'sigmoid'}>Sigmoid</MenuItem>\n                      <MenuItem value={'relu'}>ReLU</MenuItem>\n                    </Select>\n                  </FormControl>\n                  <br></br>\n                  <Button disabled={running} variant=\"contained\" onClick={() => {\n                    if (!textnnet) {\n                      textnnet = new TextNNet(\n                        [[5]],\n                        [\n                          // game progress\n                          [1], [1], [1], [1], [1], [1],\n                          // other inputs\nn                        0,\n                        true,\n                        numberOfPossibleAnswers,\n                        layers,\n                        parseFloat(learningRate),\n                        parseFloat(momentum),\n                        activationFunction);\n                    }\n                    if (!running) {\n                      setRunning(true);\n                      setGuessList([]);\n                    } else {\n                      setRunning(false);\n                    }\n\n                  }}>{running ? \"Start AI\" : \"Start AI\"}</Button>\n\n                  <label htmlFor=\"contained-button-file\">\n                    <Input\n                      sx={{ display: \"none\" }}\n                      accept=\".json\"\n                      id=\"contained-button-file\"\n                      multiple type=\"file\"\n                      onChange={(e) => {\n                        const fileReader = new FileReader();\n                        fileReader.readAsText(e.target.files[0], \"UTF-8\");\n                        let receiveResult = (ws: any) => {\n\n                          setLayers(ws.layers);\n                          setNumberOfPossibleAnswers(ws.numberOfPossibleAnswers);\n                          setLearningRate(ws.learningRate);\n                          setMomentum(ws.momentum);\n                          setTrainingMode(ws.trainingMode);\n                          setTrainWithValidRandomGuess(ws.trainWithValidRandomGuess);\n                          setEndGameOnGuessWithDisabledLetter(ws.endGameOnGuessWithDisabledLetter);\n                          setActivationFunction(ws.activationFunction);\n\n                          textnnet = new TextNNet(\n                            [[5]],\n                            [\n                              // game progress\n                              [1], [1], [1], [1], [1], [1],\n                              // other inputs\nn                            0,\n                            true,\n                            ws.numberOfPossibleAnswers,\n                            ws.layers,\n                            parseFloat(ws.learningRate),\n                            parseFloat(ws.momentum),\n                            ws.activationFunction);\n                          textnnet.nnet.setWeights(ws.weights);\n                          setRunning(true);\n                          setGuessList([]);\n                        }\n\n                        fileReader.onload = (e: Event) => {\n                          if (e && e.target && e.target.result) {\n                            console.log(\"e.target.result\", e.target.result);\n                            let ws = JSON.parse(e.target.result);\n                            receiveResult(ws);\n                          }\n                        }\n                      }}\n                    />\n                    <Button variant=\"outlined\" component=\"span\" sx={{ marginLeft: 1 }}>\n                      Import Weight Set\n                    </Button>\n                  </label>\n                </CardContent>\n              </Card>\n            </>\n            }\n            <br />\n            <Card sx={{ minWidth: 275 }}>\n              <CardContent>\n                <Typography variant=\"h5\">\n                  Game/Training Options\n                </Typography>\n                <Divider></Divider>\n                <Box\n                  component=\"form\"\n                  sx={{\n                    '& > :not(style)': { m: 1, width: '40%', marginTop: '20px' },\n                  }}\n                  noValidate\n                  autoComplete=\"off\"\n                >\n                  <TextField\n                    id=\"outlined-basic\"\n                    margin=\"normal\"\n                    label=\"Learning Rate (between 0 and 1)\"\n                    variant=\"outlined\"\n                    value={learningRate}\n                    helperText=\"Changes can break the game\"\n                    onChange={(e) => {\n                      if (/(?:0)?((?:\\.\\d+)|(?:\\.))$/.test(e.target.value)) {\n                        setLearningRate(e.target.value);\n                        if (textnnet) {\n                          textnnet.nnet.learningRate = parseFloat(e.target.value);\n                        }\n                      }\n\n                    }} />\n                  <TextField\n                    id=\"outlined-basic\"\n                    margin=\"normal\"\n                    label=\"Momentum (between 0 and 1\"\n                    helperText=\"Changes can break the game\"\n                    variant=\"outlined\"\n                    value={momentum}\n                    onChange={(e) => {\n\n                      if (/^(0(\\.\\d+)?|1(\\.0+)?)$/.test(e.target.value)) {\n                        setMomentum(e.target.value);\n                        if (textnnet) {\n                          textnnet.nnet.momentum = parseFloat(e.target.value);\n                        }\n                      }\n                    }} />\n                </Box>\n                <Typography id=\"non-linear-slider\" gutterBottom>\n                  Speed:\n                </Typography>\n\n                <Slider\n                  aria-label=\"Speed\"\n                  value={speed}\n                  // getAriaValueText={}\n                  valueLabelDisplay=\"auto\"\n                  onChange={(e, value) => {\n                    setSpeed(value)\n                  }}\n                  step={200}\n                  marks\n                  min={0}\n                  max={3000}\n                />\n                <FormControlLabel control={\n                  <Switch defaultChecked onChange={(e, value) => {\n                    setTrainingMode(value);\n                  }} />\n                } label=\"Train with correct word after game\" />\n                <FormControlLabel control={\n                  <Switch onChange={(e, value) => {\n                    setEndGameOnGuessWithDisabledLetter(value)\n                    if (value === false) {\n                      setTrainWithValidRandomGuess(false);\n                    }\n                  }} />\n                } label=\"End game on guesses with disabled letters\" />\n                {!endGameOnGuessWithDisabledLetter ? (<>\n                  <FormControlLabel control={\n                    <Switch onChange={(e, value) => {\n                      setTrainWithValidRandomGuess(value)\n                    }} />\n                  } label=\"Train with random valid guess if AI guesses disabled letter\" />\n                  {trainWithValidRandomGuess && (<><Typography id=\"non-linear-slider\" gutterBottom>\n                    Train {trainWithValidRandomGuess} time(s) after invalid guess:\n                  </Typography>\n\n                    <Slider\n                      aria-label=\"Speed\"\n                      defaultValue={1}\n                      // getAriaValueText={}\n                      valueLabelDisplay=\"auto\"\n                      onChange={(e, value) => {\n                        setSpeed(value)\n                      }}\n                      step={1}\n                      marks\n                      min={1}\n                      max={100}\n                    />\n                  </>)}\n                </>) : (<></>)}\n\n                <br></br>\n\n                <Button disabled={!running} variant=\"outlined\" onClick={() => {\n                  setRunning(false);\n                  setWeightSet(\"exporting\");\n                  setTimeout(() => {\n                    download(\"weightset.json\", JSON.stringify({\n                      layers,\n                      learningRate,\n                      momentum,\n                      trainingMode,\n                      trainWithValidRandomGuess,\n                      endGameOnGuessWithDisabledLetter,\n                      numberOfPossibleAnswers,\n                      weights: textnnet.nnet.getWeights()\n\n                    }));\n                    setTimeout(() => {\n                      setRunning(true);\n                      setGuessList([]);\n                      setWeightSet(\"\");\n\n                    }, speed * 2);\n                  }, speed * 2);\n                }}>Export Weight Set</Button>\n              </CardContent>\n            </Card>\n            <br />\n            <Card sx={{ minWidth: 275 }}>\n              <CardContent>\n                <Typography variant=\"h5\">\n                  Info\n                </Typography>\n                <Divider></Divider>\n                <Box sx={{ marginTop: \"20px\" }} >\n                  <Button variant=\"contained\" onClick={() => { setTurnsPlayedByAi(0); setTurnsPlayed(0); setGamesPlayed(0); setGamesWon(0);; }}>Reset Statistics</Button>\n                </Box>\n\n                <TableContainer component={Paper}>\n                  <Table>\n                    <TableBody>\n                      {rows.map((row) => (\n                        <TableRow\n                          key={row.name}\n                          sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                        >\n                          <TableCell component=\"th\" scope=\"row\">\n                            {row.name}\n                          </TableCell>\n                          <TableCell align=\"right\">{row.value}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item md={6}>\n\n\n            {BOARD_TEMPLATE.map((row, rowIndex) => {\n              return (\n                <View key={`row-${rowIndex}`} style={styles.row}>\n                  {row.map((_, colIndex) => {\n                    const guessLetter = guessList[rowIndex]?.[colIndex];\n                    let state: TextBlockState = TextBlockState.GUESS;\n\n                    if (guessLetter === undefined) {\n                      state = TextBlockState.GUESS;\n                    } else if (guessLetter === wordToGuess.current[colIndex]) {\n                      state = TextBlockState.CORRECT;\n                    } else if (wordToGuess.current.includes(guessLetter)) {\n                      state = TextBlockState.POSSIBLE;\n                    } else {\n                      state = TextBlockState.INCORRECT;\n                    }\n\n                    const letterToShow =\n                      rowIndex === guessList.length\n                        ? inputWord[colIndex]\n                        : guessLetter;\n\n                    return (\n                      <View style={styles.mh2} key={`col-${colIndex}`}>\n                        <TextBlock text={letterToShow || ''} state={state} />\n                      </View>\n                    );\n                  })}\n                </View>\n              );\n            })}\n\n            <View style={styles.bottomContainer}>\n              <Keyboard\n                disabledKeyList={[\n                  ...disabledLetters,\n                  inputWord.length !== MAX_WORD_LEN\n                    ? SpecialKeyboardKeys.GUESS\n                    : '',\n                ]}\n                onKeyPress={onKeyPress}\n              />\n            </View>\n\n            {/* <Typography variant=\"h5\">\n      Top 10 Guesses\n    </Typography>\n      <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Dessert (100g serving)</TableCell>\n            <TableCell align=\"right\">Calories</TableCell>\n            <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {scores.map((score, i) => (\n            <TableRow\n              key={i}\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n            >\n              <TableCell component=\"th\" scope=\"row\">\n                {i + 1}\n              </TableCell>\n              <TableCell align=\"right\">{score[1]}</TableCell>\n              <TableCell align=\"right\">{score[0]}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer> */}\n          </Grid>\n        </Grid>\n      </Container>\n    </Box>\n  );\n};\n\nconst styles = StyleSheet.create({\n  // mb12: {\n  //   marginBottom: 12,\n  // },\n  // mh2: {\n  //   marginHorizontal: 2,\n  // },\n  // // button: {\n  // //   // maxWidth: '200px',\n  // //   width: '100%',\n  // // },\n  // fg1: {\n  //   flexGrow: 1,\n  // },\n  // textWhite: {\n  //   color: '#fff',\n  //   fontSize: 22,\n  // },\n  row: {\n    marginBottom: 4,\n    flexDirection: 'row',\n    justifyContent: 'center',\n  },\n  // buttons: {\n  //   maxWidth: 300,\n  //   justifyContent: 'center',\n  // },\n  bottomContainer: {\n    flexGrow: 1,\n    marginBottom: 16,\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n  },\n  // score: {\n  //   color: '#fff',\n  //   fontSize: 14,\n  //   marginBottom: 12,\n  // },\n  // buttonRow: {\n  //   flexDirection: 'row',\n  // },\n  // buttonSpacer: {\n  //   width: 12,\n  // },\n  // gamesplayed: {\n  //   textAlign: \"left\",\n  //   color: '#fff',\n  //   width: '300px',\n  // }\n});\n\nexport default GameScreen;\n\n// const letterIndex = new Map<string, number>([\n//   [\"a\", 0],\n//   [\"b\", 1],\n//   [\"c\", 2],\n//   [\"d\", 3],\n//   [\"e\", 4],\n//   [\"f\", 5],\n//   [\"g\", 6],\n//   [\"h\", 7],\n//   [\"i\", 8],\n//   [\"j\", 9],\n//   [\"k\", 10],\n//   [\"l\", 11],\n//   [\"m\", 12],\n//   [\"n\", 13],\n//   [\"o\", 14],\n//   [\"p\", 15],\n//   [\"q\", 16],\n//   [\"r\", 17],\n//   [\"s\", 18],\n//   [\"t\", 19],\n//   [\"u\", 20],\n//   [\"v\", 21],\n//   [\"w\", 22],\n//   [\"x\", 23],\n//   [\"y\", 24],\n//   [\"z\", 25],\n// ]);\n\nfunction getBestValidGuess(scoresAndIndexes: { score: number, index: number, word: string }[], disabledLetters: string[]) {\n\n  let i = scoresAndIndexes.length;\n  let bestValidGuess;\n  while (!bestValidGuess && i > -1) {\n    i--;\n    let thisWord = wordList[scoresAndIndexes[i].index];\n    if (!includesDisabledLetter(disabledLetters, thisWord)) {\n      bestValidGuess = thisWord;\n    }\n  }\n  return bestValidGuess ? { word: bestValidGuess.toUpperCase(), index: i } : { word: \"\", index: 0 };\n}\n\nfunction getScoresWithWords(arrayOfNumbers: number[], words: string[]) {\n  let scoresAndIndexes: [number, string][] = [];\n  arrayOfNumbers.forEach((n, i) => {\n    scoresAndIndexes.push([n, words[i].toUpperCase()]);\n    // scoresAndIndexes[i].push(n);\n    // scoresAndIndexes[i].push()\n  })\n  scoresAndIndexes.sort((a, b) => {\n    return b[0] - a[0];\n  });\n  return scoresAndIndexes;\n}\n\nfunction getHighestNumberIndex(arrayOfNumbers: number[]) {\n\n  let highestProbability = 0;\n  let currentBestGuessOfIndex = 0;\n  arrayOfNumbers.forEach((number, i) => {\n    if (number > highestProbability) {\n      highestProbability = number;\n      currentBestGuessOfIndex = i;\n    }\n  });\n  return { index: currentBestGuessOfIndex, certainty: highestProbability };\n}\nfunction getExpectedOutput(disabledLetters: string[], wordList: string[], numberOfOptions: number, activeResultIndex: number) {\n  let expectedResult: number[] = []\n  for (var i = 0; i < numberOfOptions; i++) {\n    expectedResult.push(activeResultIndex === i ? 1 : (includesDisabledLetter(disabledLetters, wordList[i].toUpperCase()) ? .01 : .7));\n  }\n  return expectedResult;\n}\n\nfunction randomInteger(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// function hardModeValidation(correctLetters: string[], presentLetters: guess: string) {\n\n// }\n\nfunction includesDisabledLetter(disabledLetters: string[], word: string) {\n  let stringArray = word.toUpperCase().split(\"\")\n  while (stringArray.length > 0) {\n    if (disabledLetters.includes(stringArray[0])) {\n      return true;\n    }\n    stringArray.splice(0, 1);\n  }\n  return false;\n}\n\nfunction generateGameProgress(totalTurns: number, currentTurn: number) {\n  let turnsArray = [];\n  while (turnsArray.length < totalTurns) {\n    turnsArray.push([currentTurn > turnsArray.length ? 0 : 1]);\n  }\n  return turnsArray;\n}\n\nfunction download(filename, text) {\n  var element = document.createElement('a');\n  element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n  element.setAttribute('download', filename);\n\n  element.style.display = 'none';\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n}","import React from 'react';\nimport Chart from 'react-google-charts';\nimport {Pressable, StyleSheet, Text, View} from 'react-native';\n\ninterface HistoryChartProps {\n  historyData: [number, number, number][];\n}const chartOptions = {\n  title: \"Accuracy\",\n  curveType: \"function\",\n  legend: { position: \"bottom\" },\n};\nconst Keyboard = (props: HistoryChartProps) => {\n  const {historyData} = props;\n  const chartData = [...[[\"Game\", \"Best Guess Certainty\", \"Correct Answer Certainty\"]], ...historyData];\n\n  return (\n    <>\n\n      <Chart\n            chartType=\"LineChart\"\n            width=\"100%\"\n            height=\"400px\"\n            data={chartData}\n            options={chartOptions}\n          />\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n    marginBottom: 5,\n  },\n  cell: {\n    padding: 5,\n    paddingHorizontal: 8,\n    margin: 4,\n    borderRadius: 2,\n    borderWidth: 1,\n    borderColor: 'black',\n  },\n  cellDisabled: {\n    borderColor: 'gray',\n  },\n  text: {\n    color: 'black',\n    fontSize: 16,\n  },\n  textDisabled: {\n    color: 'gray',\n  },\n});\n\nexport default Keyboard;\n","import fiveLetterWords from './constants/fiveLetterWords.json';\nimport {MAX_GUESSES} from './constants/gameConstants';\n\nexport const getInitialBoard = (): string[][] => {\n  const board: string[][] = [];\n  for (let i = 0; i < MAX_GUESSES; i++) {\n    board.push(new Array(5).fill(''));\n  }\n\n  return board;\n};\n\nexport const getRandomWord = (wordList: string[]): { word: string, index: number } => {\n  const len = wordList.length;\n  const randomIndex = Math.floor(Math.random() * 100000) % len;\n  return {\n    word: wordList[randomIndex].toUpperCase(),\n    index: randomIndex\n  };\n};\n\nexport const getWordleEmoji = (word: string, guessList: string[]): string => {\n  const hasWon = guessList[guessList.length - 1] === word;\n\n  let output = `Wordle ${hasWon ? guessList.length : 'x'}/${MAX_GUESSES}\\n\\n`;\n\n  guessList.forEach(row => {\n    let line = '';\n\n    row.split('').forEach((char, colIndex) => {\n      if (char === word[colIndex]) {\n        line += '🟩';\n      } else if (word.includes(char)) {\n        line += '🟨';\n      } else {\n        line += '⬜️';\n      }\n    });\n\n    output += line + '\\n';\n  });\n\n  return output;\n};\n","export const MAX_GUESSES = 6;\nexport const MAX_WORD_LEN = 5;\n","import React from 'react';\nimport {SafeAreaView, StyleSheet, View} from 'react-native';\nimport SourceLink from './app/components/SourceLink';\nimport ScreenHeader from './app/components/ScreenHeader';\nimport GameScreen from './app/GameScreen';\n\nexport default function App() {\n  return (\n    <View>\n      <SafeAreaView>\n        <ScreenHeader />\n        <GameScreen />\n        <SourceLink />\n      </SafeAreaView>\n    </View>\n    \n  );\n}\n\nconst styles = StyleSheet.create({\n  // container: {\n  //   flex: 1,\n  //   backgroundColor: '#000',\n  // },\n});\n"],"sourceRoot":""}