{"version":3,"sources":["app/components/Keyboard.tsx","app/components/SourceLink.tsx","app/components/ScreenHeader.tsx","app/components/TextBlock.tsx","../../neuralnet/nnet.js","app/GameScreen.tsx","app/gameUtils.ts","app/constants/gameConstants.ts","../../neuralnet/textnnet.js","App.tsx"],"names":["SpecialKeyboardKeys","HOME_URL","styles","StyleSheet","create","container","position","right","top","subtitle","color","fontWeight","fontSize","SourceLink","View","style","Text","accessibilityRole","href","onPress","Platform","OS","Linking","openURL","undefined","ScreenHeader","Box","sx","width","textAlign","Typography","variant","component","gutterBottom","TextBlockState","keySequence","row","flexDirection","marginBottom","cell","padding","paddingHorizontal","margin","borderRadius","borderWidth","borderColor","cellDisabled","text","textDisabled","Keyboard","props","onKeyPress","disabledKeyList","map","rowIndex","key","isDisabled","includes","Pressable","disabled","ColorMap","GUESS","CORRECT","POSSIBLE","INCORRECT","height","alignItems","justifyContent","TextBlock","state","backgroundColor","toUpperCase","NNEt","inputs","numberOfNodes","numberOfLayers","outputs","learningRate","randomInitialWeights","momentum","this","layers","globalError","i","push","inputId","length","Node","layer","node","weights","bias","forEach","ii","expectedOutputs","error","lastInputs","allOutputs","activateAllLayers","previousLayersDeltas","Array","apply","nextLayersDelta","thisLayersInput","nodeDelta","outputDelta","train","delta","layerInputs","layerOutputs","fire","startingWeight","weight","previousAdjustments","correction","actualOutput","activation","weightAdjustment","sigmoidDerivative","momentumAdjustment","Error","output","sigmoid","random","Math","x","smaller","exp","fx","sum","BOARD_TEMPLATE","board","fill","getInitialBoard","textnnet","textInputs","nonTextInputs","outputChars","outputUpperCase","nonTextOutputs","nnetInputs","letterToNnInput","letter","letterMap","toLowerCase","getWeights","nnet","setWeights","noletter","a","b","c","d","e","f","g","h","j","k","l","m","n","o","p","q","r","s","t","u","v","w","y","z","indexToLetter","index","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","letterToIndex","letterToIndexMap","iii","totalOutputs","ti","nti","input","concat","rawResult","textResult","currentOutputChar","highestProbability","currentBestGuessOfLetter","nonTextOutput","result","expectedTextOutput","expectedNonTextOutput","parsedExpectedTextOutput","expectedOutput","fiveLetterWords","bottomContainer","flexGrow","GameScreen","useState","guessList","setGuessList","inputWord","setInputWord","setNnStatus","certainty","setCertainty","speed","setSpeed","nnGuess","setNnGuess","setNnBestValidGuess","setRandomGuess","gameOver","setGameOver","endGameOnGuessWithDisabledLetter","setEndGameOnGuessWithDisabledLetter","trainWithValidRandomGuess","setTrainWithValidRandomGuess","running","setRunning","trainingMode","setTrainingMode","gamesPlayed","setGamesPlayed","setCurrentWordIndex","turnsPlayed","setTurnsPlayed","turnsPlayedByAi","setTurnsPlayedByAi","nnError","setnnError","setTrainingList","gamesWon","setGamesWon","disabledLetters","setDisabledLetters","wordToGuess","useRef","wordToGuessIndex","useEffect","newWord","len","randomIndex","floor","word","getRandomWord","current","guessLen","getExpectedOutput","list","split","setTimeout","runNNet","useCallback","DELETE","prev","slice","cw","gl","dl","flw","correctWord","console","log","disabledLettersInput","disabledLetter","presentLettersInput","correctLettersInput","guess","thisLetterindex","gameProgressInput","totalTurns","currentTurn","turnsArray","generateGameProgress","rawGuess","getHighestNumberIndex","nnBestGuess","invalid","includesDisabledLetter","trainingCount","randomWordLoop","randomWordIndex","randomInteger","newRandomWord","aDifferentResult","newGuessIndex","newGuessWord","window","onmessage","event","data","useMemo","line","char","colIndex","getWordleEmoji","rows","name","value","toFixed","Container","maxWidth","Grid","spacing","item","md","Button","onClick","id","Slider","defaultValue","valueLabelDisplay","onChange","step","marks","min","max","TextField","label","parseFloat","target","Divider","aria-label","FormControlLabel","control","Switch","defaultChecked","TableContainer","Paper","Table","TableBody","TableRow","border","TableCell","scope","align","_","guessLetter","letterToShow","mh2","arrayOfNumbers","currentBestGuessOfIndex","number","wordList","numberOfOptions","activeResultIndex","expectedResult","stringArray","splice","App","SafeAreaView"],"mappings":"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GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IACzIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIzE,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClI0E,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClI7C,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClI8C,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAClIC,EAAG,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAEtI5F,KAAK6F,cAAgB,SAA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I,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,IAC1wB,GACA,EACAC,EAAgBtI,QAgfZpF,GAASC,IAAWC,OAAO,CAkB/BgC,IAAK,CACHE,aAAc,EACdD,cAAe,MACf8B,eAAgB,UAMlB0J,gBAAiB,CACfC,SAAU,EACVxL,aAAc,GACd4B,WAAY,SACZC,eAAgB,cAoBL4J,GAjiBI,WACjB,MAAkCC,mBAAmB,IAArD,WAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCF,mBAAiB,IAAnD,WAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAoCJ,mBAAiB,IAArD,WACA,GADA,UACgCA,mBAAiB,KAAjD,WAAiBK,GAAjB,WACA,EAAkCL,mBAAiB,GAAnD,WAAOM,EAAP,KAAkBC,EAAlB,KACA,EAA0CP,mBAAiB,GAA3D,WACA,GADA,UACkEA,mBAAiB,IAAnF,WACA,GADA,UAC0BA,mBAAiB,IAA3C,WAAOQ,EAAP,KAAcC,EAAd,KACA,EAAwCT,mBAAiB,IAAzD,WACA,GADA,UACgCA,mBAAiB,OAAjD,YACA,IADA,YAC8BA,mBAAiB,KAA/C,aAAOU,GAAP,MAAgBC,GAAhB,MACA,GAAgDX,mBAAiB,IAAjE,aAAyBY,IAAzB,aACA,GAAsCZ,mBAAiB,IAAvD,aAAoBa,IAApB,aACA,GAAgCb,oBAAkB,GAAlD,aAAOc,GAAP,MAAiBC,GAAjB,MACA,GAAgFf,oBAAkB,GAAlG,aAAOgB,GAAP,MAAyCC,GAAzC,MACA,GAAgCjB,oBAAkB,GAAlD,aACA,IADA,YACkEA,oBAAkB,IAApF,aAAOkB,GAAP,MAAkCC,GAAlC,MACA,GAA8BnB,oBAAkB,GAAhD,aAAOoB,GAAP,MAAgBC,GAAhB,MAEA,GAAwCrB,oBAAkB,GAA1D,aAAOsB,GAAP,MAAqBC,GAArB,MACA,GAAsCvB,mBAAiB,GAAvD,aAAOwB,GAAP,MAAoBC,GAApB,MACA,GAAgDzB,mBAAiB,GAAjE,aAAyB0B,IAAzB,aACA,GAAsC1B,mBAAiB,GAAvD,aAAO2B,GAAP,MAAoBC,GAApB,MACA,GAA8C5B,mBAAiB,GAA/D,aAAO6B,GAAP,MAAwBC,GAAxB,MACA,GAA8B9B,mBAAiB,GAA/C,aAAO+B,GAAP,MAAgBC,GAAhB,MACA,GAA8ChC,mBAAiB,IAA/D,aACA,IADA,YACwCA,mBAAsC,KAA9E,aAAqBiC,IAArB,aAGA,GAAgCjC,mBAAiB,GAAjD,aAAOkC,GAAP,MAAiBC,GAAjB,MACA,GAA8CnC,mBAAmB,IAAjE,aAAOoC,GAAP,MAAwBC,GAAxB,MAEMC,GAAcC,iBAAe,SAC7BC,GAAmBD,iBAAe,GAExCE,qBAAU,WACR,IAAiB,IAAb3B,GAAoB,CACtB,IAAM4B,ECjDiB,WAC3B,IAAMC,EAAM/C,EAAgBtI,OACtBsL,EAAchJ,KAAKiJ,MAAsB,IAAhBjJ,KAAKD,UAAqBgJ,EACzD,MAAO,CACLG,KAAMlD,EAAgBgD,GAAarM,cACnCuG,MAAO8F,GD4CWG,GAChBT,GAAYU,QAAUN,EAAQI,KAC9BN,GAAiBQ,QAAUN,EAAQ5F,MACnC4E,GAAoBgB,EAAQ5F,OAE5BsD,EAAa,IACbF,EAAa,IACbuB,GAAeD,GAAc,GAE3BJ,IACFL,IAAY,KAEb,CAACD,KAGJ2B,qBAAU,WACR,IAAMQ,EAAWhD,EAAU3I,OAC3B,GAAI2I,EAAUgD,EAAW,KAAOX,GAAYU,QACtC1B,KAIFhH,GAAS5B,MAAM,KAAM,KAAM,KAAMwK,GAAkBd,GAAiBxC,EAAiBA,EAAgBtI,OAAQkL,GAAiBQ,UAC9HhB,GAAW1H,GAASY,KAAKhE,cAI3B+K,GAAgB,IAChBlB,IAAY,QAEP,GE3FgB,IF2FZkC,GAAwD,KAA5BhD,EAAUgD,EAAW,GACtD3B,KACFhH,GAAS5B,MAAM,KAAM,KAAM,KAAMwK,GAAkBd,GAAiBxC,EAAiBA,EAAgBtI,OAAQkL,GAAiBQ,UAC9HhB,GAAW1H,GAASY,KAAKhE,cAE3B+K,GAAgB,IAChBlB,IAAY,OACP,CACL,IAAMoC,EAAiB,GAEvBlD,EAAUrI,SAAQ,SAAAkL,GAChBA,EAAKM,MAAM,IAAIxL,SAAQ,SAAAkD,GAEhBwH,GAAYU,QAAQvN,SAASqF,IAChCqI,EAAK/L,KAAK0D,SAKhBuH,GAAmBc,MAKpB,CAAClD,EAAWmB,KAGfqB,qBAAU,WAERb,GAAeD,GAAc,GAC7B0B,YAAW,WACTC,GAAQhB,GAAYU,QAAS/C,EAAWmC,GAAiBxC,KACzDY,KAED,CAAC4B,KAKJ,IAAMjN,GAAaoO,uBACjB,SAAChO,GAEKA,IAAQvD,EAAoBwR,OAC9BpD,GAAa,SAAAqD,GAAI,OAAIA,EAAKC,MAAM,GAAI,MAC3BnO,IAAQvD,EAAoB6D,OACrCqK,GAAa,SAAAuD,GAAI,oBAAQA,GAAR,CAActD,EAAU5J,mBACzC6J,EAAa,KACW,IAAf7K,EAAI+B,QACb8I,GAAa,SAAAqD,GACX,OAAIA,EAAKnM,OE3IS,IF2IiB8K,GAAgB3M,SAASF,GACnDkO,EAAOlO,EAETkO,OAIb,CAACrB,GAAiBjC,IAGdmD,GAAU,SAACK,EAAYC,EAAcC,EAAcC,GACvD,GAAK1C,GAAL,CAIA,IAAI2C,EAAcJ,EAAGP,MAAM,IAC3BY,QAAQC,IAAI,cAEZ,IADA,IAAIC,EAAuB,IAAI9L,MACtBjB,EAAI,EAAGA,EAAI,GAAIA,IACtB+M,EAAqB9M,KAAK,CAAC,IAG7B,IAAK,IAAID,EAAI,EAAGA,EAAI0M,EAAGvM,OAAQH,IAAK,CAClC,IAAIgN,EAAiBN,EAAG1M,GAExB+M,EAD0B5J,GAASmE,cAAc0F,IACL,CAAC,GAS/C,IANA,IAAIC,EAAsB,IAAIhM,MAC1BiM,EAAsB,IAAIjM,MAKrBjB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1BkN,EAAoBjN,KAAK,YACzBgN,EAAoBhN,KAAK,IACzB,IAAK,IAAIyE,EAAI,EAAGA,EAAI,GAAIA,IACtBuI,EAAoBjN,GAAGC,KAAK,CAAC,IAOjCwM,EAAGhM,SAAQ,SAAC0M,EAAenN,GACzB,IAAK,IAAIU,EAAK,EAAGA,EAAKyM,EAAMhN,OAAQO,IAAM,CACxC,IAAM0M,EAAkBjK,GAASmE,cAAc6F,EAAMzM,IAEjDkM,EAAYtO,SAAS6O,EAAMzM,MAEzByM,EAAMzM,KAAQkM,EAAYlM,GAC5BwM,EAAoBxM,GAAMyM,EAAMzM,GAEhCuM,EAAoBjN,GAAGoN,GAAmB,CAAC,QAMnD,IAAIC,EA0cR,SAA8BC,EAAoBC,GAChD,IAAIC,EAAa,GACjB,KAAOA,EAAWrN,OAASmN,GACzBE,EAAWvN,KAAK,CAACsN,EAAcC,EAAWrN,OAAS,EAAI,IAEzD,OAAOqN,EA/cmBC,CAAqB,EAAG3E,EAAU3I,QAEtDyH,EAAS,CAAC,CAACsF,GAAF,cAA4BG,GAAsBN,EAAlD,IAA2EE,EAAoB,IAA/F,IAAsGA,EAAoB,IAA1H,IAAiIA,EAAoB,IAArJ,IAA4JA,EAAoB,IAAhL,IAAuLA,EAAoB,MAExNnC,IAAgB,SAAAwB,GAAI,oBAAQA,GAAR,CAAc1E,OAGlCsB,EAAY,cAEZQ,GAAe,IACfD,GAAoB,IAEpBD,GAAW,IAEX,IAKIkE,EAAWC,GALCxK,GAASxB,KAAKiG,EAAM,GAAIA,EAAM,IAAIpE,gBAMlD4F,EAAasE,EAASvE,WACtB,IAAIyE,EAAsBjB,EAAIe,EAAS/H,OAAOvG,cAG1CyO,EAAkB,GAEtB,GAAIC,GAAuBpB,EAAIkB,KAAiB/D,IAAoCE,KAGlF,GAFA8D,EAAU,YAENhE,GAEFd,GAAa,SAAAuD,GAAI,oBAAQA,GAAR,CAAc,aAC1B,GAAIvC,GAA2B,CAEpC,IAAIgE,EAAgB,GAKC,SAAjBC,IAGF,IAFA,IAAIC,EAAkBC,GAAc,EAAGvB,EAAIxM,OAAS,GAChDgO,EAAgBxB,EAAIsB,GAAiB7O,cAClC0O,GAAuBpB,EAAIyB,IAChCF,EAAkBC,GAAc,EAAGvB,EAAIxM,OAAS,GAChDgO,EAAgBxB,EAAIsB,GAAiB7O,cAGvCsK,GAAeyE,GAEf,IAAIC,EAAmBrC,GAAkBW,EAAIC,EAAKA,EAAIxM,OAAQ8N,GAC9D9K,GAAS5B,MAAM,KAAM,KAAM,KAAM6M,GACjCvD,GAAW1H,GAASY,KAAKhE,aACzB,IACIsO,EAAgBV,GADIxK,GAASxB,KAAKiG,EAAM,GAAIA,EAAM,IAAIpE,gBACGmC,MACzD2I,EAAe3B,EAAI0B,GAAejP,cAElC0O,GAAuBpB,EAAI4B,IAAiBP,EAAgB,GAC9DA,IACA7B,WAAW8B,EAAgB3E,IAE3BN,GAAa,SAAAuD,GAAI,oBAAQA,GAAR,CAAc6B,OAGnCH,SAIEJ,IAAgBzC,GAAYU,SAC9Bb,GAAYD,GAAW,GAGrBjC,EAAU3I,OAAS,GACrBwK,GAAmBD,GAAkB,GAEvC3B,GAAa,SAAAuD,GAAI,oBAAQA,GAAR,CAAcsB,OAEjCpE,GAAWoE,EAAcC,KAU3BU,OAAOC,UANU,SAACC,GACE,cAAdA,EAAMC,MACRvC,GAAQhB,GAAYU,QAAS/C,EAAWmC,GAAiBxC,IAMjCkG,mBAAQ,WAClC,OAAKhF,GC5QqB,SAACgC,EAAc7C,GAC3C,IAEIxG,EAAM,WAFKwG,EAAUA,EAAU3I,OAAS,KAAOwL,EAEnB7C,EAAU3I,OAAS,KAAzC,SAkBV,OAhBA2I,EAAUrI,SAAQ,SAAAxD,GAChB,IAAI2R,EAAO,GAEX3R,EAAIgP,MAAM,IAAIxL,SAAQ,SAACoO,EAAMC,GACvBD,IAASlD,EAAKmD,GAChBF,GAAQ,eACCjD,EAAKrN,SAASuQ,GACvBD,GAAQ,eAERA,GAAQ,kBAIZtM,GAAUsM,EAAO,QAGZtM,ED2PEyM,CAAe5D,GAAYU,QAAS/C,GAHlC,KAIR,CAACa,GAAUb,IANd,IAQMkG,GAAO,CACX,CACEC,KAAM,mBACNC,MAAOzG,EAAgBtI,QAEzB,CACE8O,KAAM,aACNC,MAAO3F,IAET,CACE0F,KAAM,uBACNC,MAAO/F,EAAUgG,QAAQ,IAE3B,CACEF,KAAM,SACNC,MAAO/D,GAAYU,SAErB,CACEoD,KAAM,eACNC,MAAO1E,IAET,CACEyE,KAAM,eACNC,MAAO7E,IAET,CACE4E,KAAM,YACNC,MAAOnE,IAET,CACEkE,KAAM,YACNC,OAAQzM,KAAKiJ,MAAOX,GAAWV,GAAe,KAAO,KAAM8E,QAAQ,IAErE,CACEF,KAAM,mBACNC,MAAOtE,GAAQuE,QAAQ,KAG3B,OACE,cAAC5S,EAAA,EAAD,UACE,cAAC6S,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,eAACC,EAAA,EAAD,CAAMpU,WAAS,EAACqU,QAAQ,IAAxB,UACE,eAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAG,IAAd,UAEJ,cAACC,EAAA,EAAD,CAAQlR,SAAUyL,GAASrN,QAAQ,YAAY+S,QAAS,WAIpDzF,IAHGD,KADP,SAOkB,cAElBA,IAAW,qCACb,cAACtN,EAAA,EAAD,CAAYiT,GAAG,oBAAoB9S,cAAY,EAA/C,qBAIE,cAAC+S,EAAA,EAAD,CACErR,UAAQ,EACRsR,aAAc,EAEdC,kBAAkB,OAClBC,SAAW,SAAC1L,EAAG4K,GACb5F,EAAS4F,IAEXe,KAAM,EACNC,OAAK,EACLC,IAAK,EACLC,IAAK,MAGP,cAACC,EAAA,EAAD,CAAWT,GAAG,iBAAiBU,MAAM,gBAAgB1T,QAAQ,WAAW4B,SAAUyL,GAAS6F,aAAc3M,GAASY,KAAKrE,aAAcsQ,SAAU,SAAC1L,GAC9InB,GAASY,KAAKrE,aAAe6Q,WAAWjM,EAAEkM,OAAOtB,UAEnD,cAACmB,EAAA,EAAD,CAAWT,GAAG,iBAAiBU,MAAM,WAAW1T,QAAQ,WAAW4B,SAAUyL,GAAS6F,aAAc3M,GAASY,KAAKnE,SAAUoQ,SAAU,SAAC1L,GACrInB,GAASY,KAAKnE,SAAW2Q,WAAWjM,EAAEkM,OAAOtB,UAE/C,cAACuB,EAAA,EAAD,CAAS7T,QAAQ,aAGjB,cAACD,EAAA,EAAD,CAAYiT,GAAG,oBAAoB9S,cAAY,EAA/C,oBAIA,cAAC+S,EAAA,EAAD,CACEa,aAAW,QACXZ,aAAc,IAEdC,kBAAkB,OAClBC,SAAW,SAAC1L,EAAG4K,GACb5F,EAAS4F,IAEXe,KAAM,IACNC,OAAK,EACLC,IAAK,EACLC,IAAK,MAEL,cAACO,EAAA,EAAD,CAAkBC,QAChB,cAACC,EAAA,EAAD,CAAQC,gBAAc,EAACd,SAAU,SAAC1L,EAAG4K,GACnC9E,GAAgB8E,MAElBoB,MAAM,uCACR,cAACK,EAAA,EAAD,CAAkBC,QAChB,cAACC,EAAA,EAAD,CAAQb,SAAU,SAAC1L,EAAG4K,GACpBpF,GAAoCoF,IACtB,IAAVA,GACFlF,IAA6B,MAGjCsG,MAAM,8CACPzG,GAwBK,6BAxB+B,qCACrC,cAAC8G,EAAA,EAAD,CAAkBC,QAChB,cAACC,EAAA,EAAD,CAAQb,SAAU,SAAC1L,EAAG4K,GACpBlF,GAA6BkF,MAE/BoB,MAAM,gEACTvG,IAA8B,qCAAE,cAACpN,EAAA,EAAD,CAAYiT,GAAG,oBAAoB9S,cAAY,EAA/C,mDAIjC,cAAC+S,EAAA,EAAD,CACEa,aAAW,QACXZ,aAAc,IAEdC,kBAAkB,OAClBC,SAAW,SAAC1L,EAAG4K,GACb5F,EAAS4F,IAEXe,KAAM,EACNC,OAAK,EACLC,IAAK,EACLC,IAAK,YAKP,cAACV,EAAA,EAAD,CAAQ9S,QAAQ,YAAY+S,QAAS,WAAQhF,GAAmB,GAAIF,GAAe,GAAIH,GAAe,GAAIU,GAAY,IAAtH,8BACA,cAAC+F,EAAA,EAAD,CAAgBlU,UAAWmU,IAA3B,SAEA,cAACC,EAAA,EAAD,UAUE,cAACC,EAAA,EAAD,UACGlC,GAAK9Q,KAAI,SAACjB,GAAD,OACR,eAACkU,EAAA,EAAD,CAEE3U,GAAI,CAAE,mCAAoC,CAAE4U,OAAQ,IAFtD,UAIE,cAACC,EAAA,EAAD,CAAWxU,UAAU,KAAKyU,MAAM,MAAhC,SACGrU,EAAIgS,OAEP,cAACoC,EAAA,EAAD,CAAWE,MAAM,QAAjB,SAA0BtU,EAAIiS,UANzBjS,EAAIgS,kBAcnB,eAACK,EAAA,EAAD,CAAME,MAAI,EAACC,GAAG,IAAd,UAGG1M,GAAe7E,KAAI,SAACjB,EAAKkB,GACxB,OACE,cAACxC,EAAA,EAAD,CAA8BC,MAAOb,GAAOkC,IAA5C,SACGA,EAAIiB,KAAI,SAACsT,EAAG1C,GAAc,IAAD,EAClB2C,EAAW,SAAG3I,EAAU3K,SAAb,EAAG,EAAsB2Q,GACtC5P,EAAwBnC,EAAe2B,MAGzCQ,OADkB7C,IAAhBoV,EACM1U,EAAe2B,MACd+S,IAAgBtG,GAAYU,QAAQiD,GACrC/R,EAAe4B,QACdwM,GAAYU,QAAQvN,SAASmT,GAC9B1U,EAAe6B,SAEf7B,EAAe8B,UAGzB,IAAM6S,EACJvT,IAAa2K,EAAU3I,OACnB6I,EAAU8F,GACV2C,EAEN,OACE,cAAC9V,EAAA,EAAD,CAAMC,MAAOb,GAAO4W,IAApB,SACE,cAAC,EAAD,CAAW/T,KAAM8T,GAAgB,GAAIxS,MAAOA,KAD9C,OAAqC4P,OArB3C,OAAkB3Q,MA8BtB,cAACxC,EAAA,EAAD,CAAMC,MAAOb,GAAO2N,gBAApB,SACE,cAAC,EAAD,CACEzK,gBAAe,cACVgN,IADU,CEnfG,IFqfhBjC,EAAU7I,OACNtF,EAAoB6D,MACpB,KAENV,WAAYA,kBAiHtB,SAAS2P,GAAsBiE,GAE7B,IAAI3J,EAAqB,EACrB4J,GAA2B,EAO/B,OANAD,EAAenR,SAAQ,SAACqR,EAAQ9R,GAC1B8R,EAAS7J,IACXA,EAAqB6J,EACrBD,EAA0B7R,MAGvB,CAAC2F,MAAOkM,EAAyB1I,UAAWlB,GAErD,SAAS8D,GAAkBd,EAA2B8G,EAAoBC,EAAyBC,GAEjG,IADA,IAAIC,EAA2B,GACtBlS,EAAI,EAAGA,EAAIgS,EAAiBhS,IACnCkS,EAAejS,KAAKgS,IAAsBjS,EAAI,EAAK8N,GAAuB7C,EAAiB8G,EAAS/R,GAAGZ,eAAiB,EAAI,IAE9H,OAAO8S,EAGT,SAAShE,GAAciC,EAAaC,GAClC,OAAO3N,KAAKiJ,MAAMjJ,KAAKD,UAAY4N,EAAMD,EAAM,IAAMA,EAOvD,SAASrC,GAAuB7C,EAA2BU,GAEzD,IADA,IAAIwG,EAAcxG,EAAKvM,cAAc6M,MAAM,IACpCkG,EAAYhS,OAAS,GAAG,CAC7B,GAAI8K,EAAgB3M,SAAS6T,EAAY,IACvC,OAAO,EAETA,EAAYC,OAAO,EAAG,GAExB,OAAO,EIzoBM,SAASC,KACtB,OACE,cAAC1W,EAAA,EAAD,UACE,eAAC2W,EAAA,EAAD,WACE,cAAC,EAAD,IACA,cAAC,GAAD,IACA,cAAC,EAAD,SAOOtX,IAAWC,OAAO,K","file":"static/js/app.79c58e0f.chunk.js","sourcesContent":["import React from 'react';\nimport {Pressable, StyleSheet, Text, View} from 'react-native';\n\ninterface KeyboardProps {\n  onKeyPress(char: string): void;\n  disabledKeyList: string[];\n}\n\nexport enum SpecialKeyboardKeys {\n  DELETE = 'delete',\n  GUESS = 'guess',\n}\n\nconst keySequence: string[][] = [\n  ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n  ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n  ['Z', 'X', 'C', 'V', 'B', 'N', 'M'],\n  // [SpecialKeyboardKeys.DELETE, SpecialKeyboardKeys.GUESS],\n];\n\nconst Keyboard = (props: KeyboardProps) => {\n  const {onKeyPress, disabledKeyList} = props;\n\n  return (\n    <>\n      {keySequence.map((row, rowIndex) => {\n        return (\n          <View key={'key-row-' + rowIndex} style={styles.row}>\n            {row.map(key => {\n              const isDisabled = disabledKeyList.includes(key);\n              return (\n                <Pressable\n                  key={key}\n                  disabled={isDisabled}\n                  onPress={() => onKeyPress(key)}>\n                  <View\n                    style={[styles.cell, isDisabled && styles.cellDisabled]}>\n                    <Text\n                      style={[styles.text, isDisabled && styles.textDisabled]}>\n                      {key}\n                    </Text>\n                  </View>\n                </Pressable>\n              );\n            })}\n          </View>\n        );\n      })}\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n    marginBottom: 5,\n  },\n  cell: {\n    padding: 5,\n    paddingHorizontal: 8,\n    margin: 4,\n    borderRadius: 2,\n    borderWidth: 1,\n    borderColor: 'black',\n  },\n  cellDisabled: {\n    borderColor: 'gray',\n  },\n  text: {\n    color: 'black',\n    fontSize: 16,\n  },\n  textDisabled: {\n    color: 'gray',\n  },\n});\n\nexport default Keyboard;\n","import React from 'react';\nimport {Linking, Platform, StyleSheet, Text, View} from 'react-native';\n\nconst HOME_URL = 'https://github.com/LonelyCpp/react-native-wordle';\n\nconst SourceLink = () => {\n  return (\n    <View style={styles.container}>\n      <Text\n        style={styles.subtitle}\n        accessibilityRole=\"link\"\n        // @ts-ignore (web only prop)\n        href={HOME_URL}\n        onPress={\n          Platform.OS !== 'web' ? () => Linking.openURL(HOME_URL) : undefined\n        }>\n        (github)\n      </Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    right: 12,\n    top: 16,\n  },\n  subtitle: {\n    color: '#5998c5',\n    fontWeight: '400',\n    fontSize: 16,\n  },\n});\n\nexport default SourceLink;\n","import { Box, Typography } from '@mui/material';\nimport React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nconst ScreenHeader = () => {\n  return (\n    <Box sx={{ width: '100%', textAlign: \"center\"}}>\n      <Typography variant=\"h4\" component=\"div\" gutterBottom>\n        wordle ai\n      </Typography>\n    </Box>\n  );\n};\n\nconst styles = StyleSheet.create({\n\n});\n\nexport default ScreenHeader;\n","import React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nexport enum TextBlockState {\n  GUESS = 'guess',\n  CORRECT = 'correct',\n  POSSIBLE = 'possible',\n  INCORRECT = 'incorrect',\n}\n\nconst ColorMap: Record<TextBlockState, string> = {\n  [TextBlockState.GUESS]: 'transparent',\n  [TextBlockState.CORRECT]: '#76b041',\n  [TextBlockState.POSSIBLE]: '#FFC914',\n  [TextBlockState.INCORRECT]: '#8b939c',\n};\n\ninterface TextBlockProps {\n  text: string;\n  state: TextBlockState;\n}\n\nconst TextBlock = (props: TextBlockProps) => {\n  const {text, state} = props;\n\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: ColorMap[state],\n        },\n      ]}>\n      <Text style={styles.text}>{text.toUpperCase()}</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: 40,\n    height: 40,\n    borderWidth: 1,\n    borderRadius: 4,\n    borderColor: 'white',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 16,\n    color: '#fff',\n    fontWeight: 'bold',\n  },\n});\n\nexport default TextBlock;\n","// FYI, this is a mess, with too much one-off stuff just to make it work\nexport default class NNEt {\n    constructor(inputs, numberOfNodes, numberOfLayers, outputs = 1, learningRate = 0.3, randomInitialWeights = false, momentum = 0.001) {\n        // array of inputs\n        this.inputs = inputs;\n        // e.x. [[1], [2], [1]]\n        // the number inside the innner arrays represents the number of inputs for each input node\n\n        // Number of outputs, each output has only one output value (which will always be a number between 0.0 and 1.0)\n        this.outputs = outputs;\n        \n        // number of nodes in hidden layer(s)\n        this.numberOfNodes = numberOfNodes;\n\n        // number of hidden layers\n        this.numberOfLayers = numberOfLayers;\n\n        // Learning rate\n        this.learningRate = learningRate;\n\n        this.momentum = momentum;\n        \n        // Randomize initial weights\n        this.randomInitialWeights = randomInitialWeights;\n        \n        // Here is our array of layers\n        this.layers = [];\n\n        this.globalError = 0;\n\n        // Layer Index\n        let i = 0;\n        \n        // Input layer\n        this.layers.push([]);\n        let inputId = 0;\n        while (this.layers[i].length < inputs.length) {\n            this.layers[i].push(new Node(inputs[inputId][0]));\n            inputId++;\n        }\n        i++;\n        \n        // Middle layer(s)\n        while (this.layers.length < numberOfLayers) {\n            this.layers.push([]);\n            if (i === 1) {\n                // Layer below the input layer, gets the number of input\n                while (this.layers[i].length < this.numberOfNodes) {\n                    this.layers[i].push(new Node(inputs.length, this.randomInitialWeights)); \n                }\n            } else {\n                // Any middle layer\n                while (this.layers[i].length < this.numberOfNodes) {\n                    this.layers[i].push(new Node(this.numberOfNodes, this.randomInitialWeights)); \n                }\n            }\n            i++;\n        }\n\n        // Output layer\n        this.layers.push([]);\n        while (this.layers[i].length < this.outputs) {\n            if (this.layers.length > 2) {\n                // There are middle layers, take the number of nodes as the number of inputs\n                this.layers[i].push(new Node(this.numberOfNodes, this.randomInitialWeights));\n            } else {\n                // No middle layers, take the input nodes directly\n                this.layers[i].push(new Node(inputs.length, this.randomInitialWeights)); \n            }\n        }\n    }\n    \n    // Get all the weights of the network\n    getWeights() {\n        return this.layers.map(layer => {\n            return layer.map(node => {\n                return { weights: node.weights, bias: node.bias };\n            });\n        });\n    }\n\n    // Set all the weights in the network\n    setWeights(weights) {\n        this.layers.forEach((layer, i) => {\n            layer.forEach((node, ii) => {\n                node.weights = weights[i][ii].weights;\n                node.bias = weights[i][ii].bias;\n            });\n        });\n    }\n\n    // TODO: Clean this up\n    // Train the network using inputs (or last inputs if not previously provided) and expected outputs\n    train(inputs, expectedOutputs) {\n        let error = 0;\n        // console.log(\"training nnet\")\n        if (!inputs) {\n            inputs = this.lastInputs;\n        }\n        let allOutputs = this.activateAllLayers(inputs);\n\n        // Creating an array in the shape of our network so we can store the deltas\n        let previousLayersDeltas = Array.apply(null, Array(this.layers.length)).map(function () { return []; });\n        \n        // get the delta from the bottom layer, \n        // and walk backwards through the layers\n        for (let i = this.layers.length - 1; i >= 0; i--) {\n            for (let ii = (this.layers[i].length - 1); ii >= 0; ii--) {\n                let nextLayersDelta = 0\n                // this layer's input is either the previous layer's output, or the original input\n                let thisLayersInput = i === 0 ? inputs[ii] : allOutputs[i - 1];\n                \n                // Delta for this node\n                let nodeDelta = 0;\n                if (i === this.layers.length - 1) {\n                    // this is the output layer, so we use the expected output for this node\n                    let outputDelta = (expectedOutputs[ii] - allOutputs[i][[ii]])\n                    nodeDelta = outputDelta;\n                    nextLayersDelta = this.layers[i][ii].train(thisLayersInput, nodeDelta, this.learningRate, this.momentum);\n                } else {\n                    // this is some middle or input layer, add up the previous layers together as they all connect together\n                    previousLayersDeltas[i + 1].forEach(delta => { \n                        nodeDelta = delta; \n                        nextLayersDelta += this.layers[i][ii].train(thisLayersInput, nodeDelta, this.learningRate, this.momentum);\n                    });\n                }\n                previousLayersDeltas[i].push(nextLayersDelta)\n                error = error + nextLayersDelta;\n            }\n        }\n        this.globalError = error;\n    }\n\n    activateAllLayers(inputs) {\n        let layerInputs;\n        let layerOutputs = [];\n        this.layers.forEach((layer, i) => {\n            layerOutputs.push([]);\n            layer.forEach((node, ii) => {\n                if (i === 0) {\n                    // Send the set of inputs for the input layer\n                    layerOutputs[i].push(node.fire(inputs[ii]));\n                } else {\n                    // Otherwise, send the output from the previous layer\n                    layerOutputs[i].push(node.fire(layerInputs));\n                }\n            });\n            // inputs for the next layer are outputs from this layer\n            layerInputs = layerOutputs[i];\n        });\n        // final layer has only one output\n        return layerOutputs;\n    }\n    fire(inputs) {\n        this.lastInputs = inputs;\n        let allOutputs = this.activateAllLayers(inputs);\n        // return the final output layer\n        return allOutputs[this.layers.length - 1]\n    }\n}\n\nclass Node {\n    constructor(inputs, randomInitialWeights) {\n        // number of inputs\n        this.inputs = inputs;\n        this.weights = Array.apply(null, Array(inputs)).map(function () { return startingWeight(randomInitialWeights); });\n        let bias = 0;\n        \n        // Try to initialize a neutral bias\n        this.weights.forEach(weight => {\n            if (weight > 0) {\n                bias = bias - weight;\n            } else {\n                bias = bias + weight;\n            }\n        });\n        this.bias = bias;\n        this.previousAdjustments = Array.apply(null, Array(inputs)).map(function () { return startingWeight(randomInitialWeights); });\n    }\n    // inputs = [];\n\n    train(inputs, correction, learningRate, momentum) {\n        let actualOutput = activation(inputs, this.weights, this.bias)\n\n        \n        for (let i = 0; i < inputs.length; i++) {\n            let weightAdjustment = correction * sigmoidDerivative(actualOutput, learningRate) * inputs[i];\n            let momentumAdjustment = this.previousAdjustments[i] * momentum;\n            this.previousAdjustments[i] = weightAdjustment;\n            this.weights[i] += weightAdjustment + momentumAdjustment;\n        }\n        this.bias = this.bias + learningRate * correction;\n        return correction * sigmoidDerivative(actualOutput, learningRate);\n    }\n    fire(inputs) {\n        if (inputs.length > this.weights.length) {\n            throw new Error(\"too many inputs\");\n        }\n        let sum = activation(inputs, this.weights, this.bias)\n        let output = sigmoid(sum);\n        if (output === 0 || output === 1) {\n            throw Error(\"output out of bounds!!!\")\n        }\n        return output;\n    }\n}\n\nfunction startingWeight(random) {\n    return random ? Math.random() : 0;\n}\nfunction sigmoid(x) {\n    let smaller = x;\n    return 1 / (1 + Math.exp(-smaller));\n} \nfunction sigmoidDerivative(x, learningRate) {\n    const fx = sigmoid(x);\n    return fx * (1 + learningRate - fx);\n}\n\nfunction activation(inputs, weights, bias) {\n    let sum = 0;\n    for (let i = 0; i < inputs.length; i++) {\n        sum += weights[i] * inputs[i]\n    }\n    return sum += bias;\n}","import React, {useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport {StyleSheet, Text, View, Clipboard, Platform, TextInputComponent} from 'react-native';\n// import Button from './components/Button';\nimport Keyboard, {SpecialKeyboardKeys} from './components/Keyboard';\nimport TextBlock, {TextBlockState} from './components/TextBlock';\nimport {MAX_GUESSES, MAX_WORD_LEN} from './constants/gameConstants';\nimport {getInitialBoard, getRandomWord, getWordleEmoji} from './gameUtils';\nimport TextNNet  from '../../../neuralnet/textnnet';\nimport fiveLetterWords from './constants/fiveLetterWords.json';\nimport {Button, FormGroup, Switch, FormControlLabel, Box, Container, TableContainer, Table, TableCell, TableRow, Paper, TableBody, TableHead, Grid, Slider, Typography, TextField, Divider} from '@mui/material';\n\nconst BOARD_TEMPLATE = getInitialBoard();\nconst textnnet = new TextNNet(\n  [[5]], \n  [\n    // game progress\n    [1], [1], [1], [1], [1], [1],\n    // other inputs\nn  0,\n  true,\n  fiveLetterWords.length);\n\nconst GameScreen = () => {\n  const [guessList, setGuessList] = useState<string[]>([]);\n  const [inputWord, setInputWord] = useState<string>('');\n  const [firstGuess, setFirstGuess] = useState<string>('');\n  const [nnStatus, setNnStatus] = useState<string>('');\n  const [certainty, setCertainty] = useState<number>(0);\n  const [randomGuesses, setRandomGuesses] = useState<number>(0);\n  const [timesToTrainWithValidWord, setTimesToTrainWithValidWord] = useState<number>(1);\n  const [speed, setSpeed] = useState<number>(0);\n  const [learningRate, setLearningRate] = useState<number>(0.5);\n  const [momentum, setMomentum] = useState<number>(0.001);\n  const [nnGuess, setNnGuess] = useState<string>('');\n  const [nnBestValidGuess, setNnBestValidGuess] = useState<string>('');\n  const [randomGuess, setRandomGuess] = useState<string>('');\n  const [gameOver, setGameOver] = useState<boolean>(false);\n  const [endGameOnGuessWithDisabledLetter, setEndGameOnGuessWithDisabledLetter] = useState<boolean>(false);\n  const [hardMode, setHardMode] = useState<boolean>(false);\n  const [trainWithValidRandomGuess, setTrainWithValidRandomGuess] = useState<boolean>(false);\n  const [running, setRunning] = useState<boolean>(false);\n  // const [expectedResult, setExpectedResult] = useState<number[]>([]);\n  const [trainingMode, setTrainingMode] = useState<boolean>(true);\n  const [gamesPlayed, setGamesPlayed] = useState<number>(0);\n  const [currentWordIndex, setCurrentWordIndex] = useState<number>(0);\n  const [turnsPlayed, setTurnsPlayed] = useState<number>(0);\n  const [turnsPlayedByAi, setTurnsPlayedByAi] = useState<number>(0);\n  const [nnError, setnnError] = useState<number>(0);\n  const [originalWeights, setOriginalWeights] = useState<object>({});\n  const [trainingList, setTrainingList] = useState<(number[][] | string[][])[]>([]);\n\n  \n  const [gamesWon, setGamesWon] = useState<number>(0);\n  const [disabledLetters, setDisabledLetters] = useState<string[]>([]);\n  \n  const wordToGuess = useRef<string>('xxxxx');\n  const wordToGuessIndex = useRef<number>(0);\n\n  useEffect(() => {\n    if (gameOver === false) {\n      const newWord = getRandomWord();\n      wordToGuess.current = newWord.word;\n      wordToGuessIndex.current = newWord.index\n      setCurrentWordIndex(newWord.index);\n      // setExpectedResult(getExpectedOutput(disabledLetters, fiveLetterWords, fiveLetterWords.length, newWord.index));\n      setInputWord('');\n      setGuessList([]);\n      setGamesPlayed(gamesPlayed + 1);\n    }\n    if (running) {\n      setGameOver(false)\n    }\n  }, [gameOver]);\n\n\n  useEffect(() => {\n    const guessLen = guessList.length;\n    if (guessList[guessLen - 1] === wordToGuess.current) {\n      if (trainingMode) {\n        // trainingList.forEach((trainingData => {\n        //   textnnet.train(trainingData[0], trainingData[1], null, expectedResult);\n        // }));\n        textnnet.train(null, null, null, getExpectedOutput(disabledLetters, fiveLetterWords, fiveLetterWords.length, wordToGuessIndex.current));\n        setnnError(textnnet.nnet.globalError);\n\n      }\n\n      setTrainingList([]);\n      setGameOver(true);\n      \n    } else if (guessLen === MAX_GUESSES || guessList[guessLen - 1] === \"\") {\n      if (trainingMode) {\n        textnnet.train(null, null, null, getExpectedOutput(disabledLetters, fiveLetterWords, fiveLetterWords.length, wordToGuessIndex.current));\n        setnnError(textnnet.nnet.globalError);\n      }\n      setTrainingList([]);\n      setGameOver(true);\n    } else {\n      const list: string[] = [];\n  \n      guessList.forEach(word => {\n        word.split('').forEach(letter => {\n          // console.log({letter});\n          if (!wordToGuess.current.includes(letter)) {\n            list.push(letter);\n          }\n        });\n      });\n  \n      setDisabledLetters(list);\n    }\n    \n    const list: string[] = [];\n\n  }, [guessList, running])\n\n\n  useEffect(() => {\n    // fire the next turn when disabled letters are reset\n    setTurnsPlayed(turnsPlayed + 1);\n    setTimeout(() => {\n      runNNet(wordToGuess.current, guessList, disabledLetters, fiveLetterWords);\n    },speed)\n    // window.postMessage('start nnet');\n  }, [disabledLetters])\n\n  // useEffect(() => {\n  // }, [turnsPlayed]);\n\n  const onKeyPress = useCallback(\n    (key: string) => {\n\n      if (key === SpecialKeyboardKeys.DELETE) {\n        setInputWord(prev => prev.slice(0, -1));\n      } else if (key === SpecialKeyboardKeys.GUESS) {\n        setGuessList(prev => [...prev, inputWord.toUpperCase()]);\n        setInputWord('');\n      } else if (key.length === 1) {\n        setInputWord(prev => {\n          if (prev.length < MAX_WORD_LEN && !disabledLetters.includes(key)) {\n            return prev + key;\n          }\n          return prev;\n        });\n      }\n    },\n    [disabledLetters, inputWord],\n  );\n\n  const runNNet = (cw: string, gl: string[], dl: string[], flw: string[]) => {\n    if (!running) {\n      return;\n    }\n\n    let correctWord = cw.split(\"\");\n    console.log(\"running...\")\n    let disabledLettersInput = new Array<number[]>();\n    for (let i = 0; i < 26; i++) {\n      disabledLettersInput.push([0]);\n    }\n\n    for (let i = 0; i < dl.length; i++) {\n      let disabledLetter = dl[i];\n      let disabledLetterIndex = textnnet.letterToIndex(disabledLetter);\n      disabledLettersInput[disabledLetterIndex] = [1];\n    }\n\n    let presentLettersInput = new Array<Array<number>[]>();\n    let correctLettersInput = new Array<string>();\n\n    // for (let i = 0; i < 26; i++) {\n    //   presentLettersInput.push([0]);\n    // }\n    for (let i = 0; i < 5; i++) {\n      correctLettersInput.push(\"noletter\");\n      presentLettersInput.push([]);\n      for (let j = 0; j < 26; j++) {\n        presentLettersInput[i].push([0]);\n      }\n\n    }\n    let presentLetters:string[][] = [];\n\n\n    gl.forEach((guess: string, i) => {\n      for (let ii = 0; ii < guess.length; ii++) {\n        const thisLetterindex = textnnet.letterToIndex(guess[ii]);\n        \n        if (correctWord.includes(guess[ii])) {\n          // presentLetters.push([guess[ii]]);\n          if (guess[ii] === correctWord[ii]) {\n            correctLettersInput[ii] = guess[ii];\n          } else {\n            presentLettersInput[i][thisLetterindex] = [1];\n          }\n        }\n      }\n    });\n\n    let gameProgressInput = generateGameProgress(6, guessList.length);\n\n    let input =  [[correctLettersInput], [...gameProgressInput, ...disabledLettersInput, ...presentLettersInput[0], ...presentLettersInput[1], ...presentLettersInput[2], ...presentLettersInput[3], ...presentLettersInput[4]]];\n\n    setTrainingList(prev => [...prev, input]);\n    \n    let timesTrained = 0;\n    setNnStatus(\"Playing...\");\n\n    setRandomGuess(\"\");\n    setNnBestValidGuess(\"\");\n\n    setNnGuess(\"\");\n\n    let rawOutput = textnnet.fire(input[0], input[1]).nonTextOutputs;\n\n\n\n    // Best overall guess from NN\n    let rawGuess = getHighestNumberIndex(rawOutput);\n    setCertainty(rawGuess.certainty);\n    let nnBestGuess: string = flw[rawGuess.index].toUpperCase();\n    \n    let turnPlayedByAi = true;\n    let invalid: string = \"\";\n\n    if (includesDisabledLetter(dl, nnBestGuess) && (endGameOnGuessWithDisabledLetter || trainWithValidRandomGuess)) {\n      invalid = \"(invalid)\";\n      // If the very best guess is not valid, do some stuff\n      if (endGameOnGuessWithDisabledLetter) {\n        // If we are supposed to end the game when a disabled letter is guessed, end it.\n        setGuessList(prev => [...prev, \"\"]);\n      } else if (trainWithValidRandomGuess) {\n\n        let trainingCount = 0;\n        // let aDifferentResult = getExpectedOutput(fiveLetterWords.length, bestValidGuessIndex);\n        \n        \n        let newResult = \"\";\n        let randomWordLoop = () => {\n          let randomWordIndex = randomInteger(0, flw.length - 1);\n          let newRandomWord = flw[randomWordIndex].toUpperCase();\n          while (includesDisabledLetter(dl, newRandomWord)) {\n            randomWordIndex = randomInteger(0, flw.length - 1);\n            newRandomWord = flw[randomWordIndex].toUpperCase();\n          }\n          \n          setRandomGuess(newRandomWord);\n          \n          let aDifferentResult = getExpectedOutput(dl, flw, flw.length, randomWordIndex);\n          textnnet.train(null, null, null, aDifferentResult);\n          setnnError(textnnet.nnet.globalError);\n          let newGuessRawOutput = textnnet.fire(input[0], input[1]).nonTextOutputs;\n          let newGuessIndex = getHighestNumberIndex(newGuessRawOutput).index;\n          let newGuessWord = flw[newGuessIndex].toUpperCase();\n          \n          if (includesDisabledLetter(dl, newGuessWord) && trainingCount < 1) {\n            trainingCount++;\n            setTimeout(randomWordLoop, speed);\n          } else {\n            setGuessList(prev => [...prev, newRandomWord]);\n          }\n        }\n        randomWordLoop();\n      }\n\n    } else {\n      if (nnBestGuess === wordToGuess.current) {\n        setGamesWon(gamesWon + 1);\n      }\n\n      if (guessList.length > 0) {\n        setTurnsPlayedByAi(turnsPlayedByAi + 1);\n      }\n      setGuessList(prev => [...prev, nnBestGuess]);\n    }\n    setNnGuess(nnBestGuess + invalid)\n\n  };\n\n  const callback = (event: MessageEvent) => {\n    if (event.data == 'start nnet') {\n      runNNet(wordToGuess.current, guessList, disabledLetters, fiveLetterWords);\n    }\n  };\n\n  window.onmessage = callback;\n  \n  const wordleEmoji: string = useMemo(() => {\n    if (!gameOver) {\n      return '';\n    }\n\n    return getWordleEmoji(wordToGuess.current, guessList);\n  }, [gameOver, guessList]);\n\n  const rows = [\n    {\n      name: \"Possible Answers\",\n      value: fiveLetterWords.length\n    },\n    {\n      name: \"Best Guess\",\n      value: nnGuess\n    },\n    {\n      name: \"Best Guess Certainty\",\n      value: certainty.toFixed(5)\n    },\n    {\n      name: \"Answer\",\n      value: wordToGuess.current\n    },\n    {\n      name: \"Turns Played\",\n      value: turnsPlayed\n    },\n    {\n      name: \"Games Played\",\n      value: gamesPlayed\n    },\n    {\n      name: \"Games Won\",\n      value: gamesWon\n    },\n    {\n      name: \"Win Ratio\",\n      value: (Math.floor((gamesWon / gamesPlayed )* 100) / 100 ).toFixed(5)\n    },\n    {\n      name: \"Neural Net Error\",\n      value: nnError.toFixed(5)\n    }\n  ];\n  return (\n    <Box>\n      <Container maxWidth=\"md\">\n        <Grid container spacing=\"2\">\n          <Grid item md=\"6\">\n            \n      <Button disabled={running} variant=\"contained\" onClick={() => { \n        if (!running) {\n          setRunning(true);\n        } else {\n          setRunning(false);\n        }\n        \n        } }>{ running ? \"Start AI\" : \"Start AI\"}</Button>\n    \n    {!running && <>\n    <Typography id=\"non-linear-slider\" gutterBottom>\n      Layers:\n    </Typography>\n\n      <Slider\n        disabled\n        defaultValue={1}\n        // getAriaValueText={}\n        valueLabelDisplay=\"auto\"\n        onChange= {(e, value) => {\n          setSpeed(value)\n        }}\n        step={1}\n        marks\n        min={1}\n        max={100}\n      />\n\n      <TextField id=\"outlined-basic\" label=\"Learning Rate\" variant=\"outlined\" disabled={running} defaultValue={textnnet.nnet.learningRate} onChange={(e)=>{\n        textnnet.nnet.learningRate = parseFloat(e.target.value); \n        }}/>\n      <TextField id=\"outlined-basic\" label=\"Momentum\" variant=\"outlined\" disabled={running} defaultValue={textnnet.nnet.momentum} onChange={(e)=>{\n        textnnet.nnet.momentum = parseFloat(e.target.value); \n        }}/>\n      <Divider variant=\"inset\"/>\n      </>}\n\n      <Typography id=\"non-linear-slider\" gutterBottom>\n      Speed:\n    </Typography>\n\n      <Slider\n        aria-label=\"Speed\"\n        defaultValue={\"1\"}\n        // getAriaValueText={}\n        valueLabelDisplay=\"auto\"\n        onChange= {(e, value) => {\n          setSpeed(value)\n        }}\n        step={200}\n        marks\n        min={0}\n        max={3000}\n      />\n        <FormControlLabel control={\n          <Switch defaultChecked onChange={(e, value) => {\n            setTrainingMode(value);\n          }}/>\n        } label=\"Train with correct word after game\" />\n        <FormControlLabel control={\n          <Switch onChange={(e, value) => {\n            setEndGameOnGuessWithDisabledLetter(value)\n            if (value === false) {\n              setTrainWithValidRandomGuess(false);\n            }\n          }}/>\n        } label=\"End game on guesses with disabled letters\" />\n      { !endGameOnGuessWithDisabledLetter ? (<>\n        <FormControlLabel control={\n          <Switch onChange={(e, value) => {\n            setTrainWithValidRandomGuess(value)\n          }}/>\n        } label=\"Train with random valid guess if AI guesses disabled letter\" />\n      {trainWithValidRandomGuess && (<><Typography id=\"non-linear-slider\" gutterBottom>\n      Maximum to train after invalid guess:\n    </Typography>\n\n      <Slider\n        aria-label=\"Speed\"\n        defaultValue={\"1\"}\n        // getAriaValueText={}\n        valueLabelDisplay=\"auto\"\n        onChange= {(e, value) => {\n          setSpeed(value)\n        }}\n        step={1}\n        marks\n        min={1}\n        max={100}\n      />\n      </>)}\n      </>) : (<></>)}\n      \n      <Button variant=\"contained\" onClick={() => { setTurnsPlayedByAi(0); setTurnsPlayed(0); setGamesPlayed(0); setGamesWon(0); ; } }>Reset Statistics</Button>\n      <TableContainer component={Paper}>\n        \n      <Table>\n        {/* <TableHead>\n          <TableRow>\n            <TableCell>Dessert (100g serving)</TableCell>\n            <TableCell align=\"right\">Calories</TableCell>\n            <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n          </TableRow>\n        </TableHead> */}\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow\n              key={row.name}\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n            >\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell align=\"right\">{row.value}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n\n    </Grid>\n    <Grid item md=\"6\">\n\n\n      {BOARD_TEMPLATE.map((row, rowIndex) => {\n        return (\n          <View key={`row-${rowIndex}`} style={styles.row}>\n            {row.map((_, colIndex) => {\n              const guessLetter = guessList[rowIndex]?.[colIndex];\n              let state: TextBlockState = TextBlockState.GUESS;\n\n              if (guessLetter === undefined) {\n                state = TextBlockState.GUESS;\n              } else if (guessLetter === wordToGuess.current[colIndex]) {\n                state = TextBlockState.CORRECT;\n              } else if (wordToGuess.current.includes(guessLetter)) {\n                state = TextBlockState.POSSIBLE;\n              } else {\n                state = TextBlockState.INCORRECT;\n              }\n\n              const letterToShow =\n                rowIndex === guessList.length\n                  ? inputWord[colIndex]\n                  : guessLetter;\n\n              return (\n                <View style={styles.mh2} key={`col-${colIndex}`}>\n                  <TextBlock text={letterToShow || ''} state={state} />\n                </View>\n              );\n            })}\n          </View>\n        );\n      })}\n\n      <View style={styles.bottomContainer}>\n        <Keyboard\n          disabledKeyList={[\n            ...disabledLetters,\n            inputWord.length !== MAX_WORD_LEN\n              ? SpecialKeyboardKeys.GUESS\n              : '',\n          ]}\n          onKeyPress={onKeyPress}\n        />\n      </View>\n\n    </Grid>\n    </Grid>\n      </Container>\n    </Box>\n  );\n};\n\nconst styles = StyleSheet.create({\n  // mb12: {\n  //   marginBottom: 12,\n  // },\n  // mh2: {\n  //   marginHorizontal: 2,\n  // },\n  // // button: {\n  // //   // maxWidth: '200px',\n  // //   width: '100%',\n  // // },\n  // fg1: {\n  //   flexGrow: 1,\n  // },\n  // textWhite: {\n  //   color: '#fff',\n  //   fontSize: 22,\n  // },\n  row: {\n    marginBottom: 4,\n    flexDirection: 'row',\n    justifyContent: 'center',\n  },\n  // buttons: {\n  //   maxWidth: 300,\n  //   justifyContent: 'center',\n  // },\n  bottomContainer: {\n    flexGrow: 1,\n    marginBottom: 16,\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n  },\n  // score: {\n  //   color: '#fff',\n  //   fontSize: 14,\n  //   marginBottom: 12,\n  // },\n  // buttonRow: {\n  //   flexDirection: 'row',\n  // },\n  // buttonSpacer: {\n  //   width: 12,\n  // },\n  // gamesplayed: {\n  //   textAlign: \"left\",\n  //   color: '#fff',\n  //   width: '300px',\n  // }\n});\n\nexport default GameScreen;\n\n// const letterIndex = new Map<string, number>([\n//   [\"a\", 0],\n//   [\"b\", 1],\n//   [\"c\", 2],\n//   [\"d\", 3],\n//   [\"e\", 4],\n//   [\"f\", 5],\n//   [\"g\", 6],\n//   [\"h\", 7],\n//   [\"i\", 8],\n//   [\"j\", 9],\n//   [\"k\", 10],\n//   [\"l\", 11],\n//   [\"m\", 12],\n//   [\"n\", 13],\n//   [\"o\", 14],\n//   [\"p\", 15],\n//   [\"q\", 16],\n//   [\"r\", 17],\n//   [\"s\", 18],\n//   [\"t\", 19],\n//   [\"u\", 20],\n//   [\"v\", 21],\n//   [\"w\", 22],\n//   [\"x\", 23],\n//   [\"y\", 24],\n//   [\"z\", 25],\n// ]);\n\nfunction getBestValidGuess(arrayOfNumbers: number[], disabledLetters: string[], wordList: string[]) {\n  let scoresAndIndexes: {score: number, index: number}[] = [];\n  arrayOfNumbers.forEach((number, i) => {\n    scoresAndIndexes.push({score: number, index: i});\n  })\n  scoresAndIndexes.sort((a, b) => {\n    return a.score - b.score;\n  });\n  let bestValidGuess = null;\n  let i = scoresAndIndexes.length;\n  while (!bestValidGuess && i > -1) {\n    i--;\n    let thisWord = wordList[scoresAndIndexes[i].index];\n    if (!includesDisabledLetter(disabledLetters, thisWord)) {\n      bestValidGuess = thisWord;\n    }\n  }\n  return bestValidGuess ? { word: bestValidGuess.toUpperCase(), index: i } : { word: \"\", index: 0 };\n}\n\nfunction getHighestNumberIndex(arrayOfNumbers: number[]) {\n\n  let highestProbability = 0;\n  let currentBestGuessOfIndex = -1;\n  arrayOfNumbers.forEach((number, i) => {\n    if (number > highestProbability) {\n      highestProbability = number;\n      currentBestGuessOfIndex = i;\n    }\n  });\n  return {index: currentBestGuessOfIndex, certainty: highestProbability };\n}\nfunction getExpectedOutput(disabledLetters: string[], wordList: string[], numberOfOptions: number, activeResultIndex: number) {\n  let expectedResult: number[] = []\n  for (var i = 0; i < numberOfOptions; i++) {\n    expectedResult.push(activeResultIndex === i ? 1 : (includesDisabledLetter(disabledLetters, wordList[i].toUpperCase()) ? 0 : .5));\n  }\n  return expectedResult;\n}\n\nfunction randomInteger(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// function hardModeValidation(correctLetters: string[], presentLetters: guess: string) {\n  \n// }\n\nfunction includesDisabledLetter(disabledLetters: string[], word: string) {\n  let stringArray = word.toUpperCase().split(\"\")\n  while (stringArray.length > 0) {\n    if (disabledLetters.includes(stringArray[0])) {\n      return true;\n    }\n    stringArray.splice(0, 1);\n  }\n  return false;\n}\n\nfunction generateGameProgress(totalTurns: number, currentTurn: number) {\n  let turnsArray = [];\n  while (turnsArray.length < totalTurns) {\n    turnsArray.push([currentTurn > turnsArray.length ? 0 : 1]);\n  }\n  return turnsArray;\n}","import fiveLetterWords from './constants/fiveLetterWords.json';\nimport {MAX_GUESSES} from './constants/gameConstants';\n\nexport const getInitialBoard = (): string[][] => {\n  const board: string[][] = [];\n  for (let i = 0; i < MAX_GUESSES; i++) {\n    board.push(new Array(5).fill(''));\n  }\n\n  return board;\n};\n\nexport const getRandomWord = (): { word: string, index: number } => {\n  const len = fiveLetterWords.length;\n  const randomIndex = Math.floor(Math.random() * 100000) % len;\n  return {\n    word: fiveLetterWords[randomIndex].toUpperCase(),\n    index: randomIndex\n  };\n};\n\nexport const getWordleEmoji = (word: string, guessList: string[]): string => {\n  const hasWon = guessList[guessList.length - 1] === word;\n\n  let output = `Wordle ${hasWon ? guessList.length : 'x'}/${MAX_GUESSES}\\n\\n`;\n\n  guessList.forEach(row => {\n    let line = '';\n\n    row.split('').forEach((char, colIndex) => {\n      if (char === word[colIndex]) {\n        line += '🟩';\n      } else if (word.includes(char)) {\n        line += '🟨';\n      } else {\n        line += '⬜️';\n      }\n    });\n\n    output += line + '\\n';\n  });\n\n  return output;\n};\n","export const MAX_GUESSES = 6;\nexport const MAX_WORD_LEN = 5;\n","\nimport NNEt from \"./nnet\";\n\n// Work in progress, not usable...\nexport default class TextNNet {\n    constructor(textInputs, nonTextInputs, outputChars = 0, outputUpperCase, nonTextOutputs) {\n        // array of inputs\n        this.nonTextInputs = nonTextInputs;\n        this.textInputs = textInputs;\n        this.nnetInputs = [];\n        this.outputChars = outputChars;\n        this.outputUpperCase = outputUpperCase;\n        this.letterToNnInput = function(letter) {\n            return this.letterMap[letter.toLowerCase()];\n        };\n        this.getWeights = function() {\n            return this.nnet.getWeights();\n        };\n        this.setWeights = function(weights) {\n            this.nnet.setWeights(weights);\n        }\n        this.letterMap = {\n            noletter: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            a: [[1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            b: [[0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            c: [[0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            d: [[0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            e: [[0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            f: [[0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            g: [[0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            h: [[0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            i: [[0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            j: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            k: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            l: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            m: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            n: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            o: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            p: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            q: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0], [0]],\n            r: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0], [0]],\n            s: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0], [0]],\n            t: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0], [0]],\n            u: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0], [0]],\n            v: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0], [0]],\n            w: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0], [0]],\n            x: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0], [0]],\n            y: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1], [0]],\n            z: [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [1]]\n        }\n        this.indexToLetter = function(index) {\n            let map = { \n                0: \"a\",\n                1: \"b\",\n                2: \"c\",\n                3: \"d\",\n                4: \"e\",\n                5: \"f\",\n                6: \"g\",\n                7: \"h\",\n                8: \"i\",\n                9: \"j\",\n                10: \"k\",\n                11: \"l\",\n                12: \"m\",\n                13: \"n\",\n                14: \"o\",\n                15: \"p\",\n                16: \"q\",\n                17: \"r\",\n                18: \"s\",\n                19: \"t\",\n                20: \"u\",\n                21: \"v\",\n                22: \"w\",\n                23: \"x\",\n                24: \"y\",\n                25: \"z\"\n            };\n            return this.outputUpperCase ? map[index].toUpperCase() : map[index]; \n        }\n        this.letterToIndex = function(letter) {\n            letter = letter.toLowerCase();\n            return this.letterToIndexMap[letter];\n        }\n        this.letterToIndexMap = {\n            a: 0,\n            b: 1,\n            c: 2,\n            d: 3,\n            e: 4,\n            f: 5,\n            g: 6,\n            h: 7,\n            i: 8,\n            j: 9,\n            k: 10,\n            l: 11,\n            m: 12,\n            n: 13,\n            o: 14,\n            p: 15,\n            q: 16,\n            r: 17,\n            s: 18,\n            t: 19,\n            u: 20,\n            v: 21,\n            w: 22,\n            x: 23,\n            y: 24,\n            z: 25\n        }\n        for (let i = 0; i < textInputs.length; i++) {\n            for (let ii = 0; ii < textInputs[i]; ii++) {\n\n                for (let iii = 0; iii < 26; iii++) {\n                    this.nnetInputs.push([1]);\n                }\n                // this.nnetInputs.push([26]);\n            }\n        }\n        for (let i = 0; i < nonTextInputs.length; i++) {\n            this.nnetInputs.push(nonTextInputs[i]);\n        }\n        let totalOutputs = 0;\n        if (outputChars && outputChars > 0) {\n            totalOutputs = totalOutputs + outputChars * 26;\n        }\n        if (nonTextOutputs && nonTextOutputs > 0) {\n            totalOutputs = totalOutputs + nonTextOutputs;\n        }\n        this.nnet = new NNEt(this.nnetInputs, this.nnetInputs.length, 1, totalOutputs, .005, false);\n        \n        // nti = non text inputs\n        this.fire = function(ti, nti) {\n            let input = [];\n            for (let i = 0; i < ti.length; i++) {\n                for (let ii = 0; ii < ti[i].length; ii++) \n                {\n                    input.push(...this.letterToNnInput(ti[i][ii]));\n                }\n            }\n            input = input.concat(nti);\n            let rawResult = this.nnet.fire(input);\n            let textResult = \"\";\n            let currentOutputChar = 0;\n            let i = 0;\n            let highestProbability = 0;\n            let currentBestGuessOfLetter = null;\n            let nonTextOutput = [];\n            rawResult.forEach(result => {\n                if (currentOutputChar < this.outputChars) {\n                    if (result > highestProbability) {\n                        highestProbability = result;\n                        currentBestGuessOfLetter = this.indexToLetter(i);\n                    }\n                    if (i == 25) {\n                        i = 0;\n                        textResult = textResult + currentBestGuessOfLetter;\n                        highestProbability = 0;\n                        currentOutputChar++;\n                    } else {\n                        i++;\n                    }\n                } else {\n                    nonTextOutput.push(result);\n                }\n            });\n            return {\n                text: this.outputUpperCase ? textResult.toUpperCase() : textResult,\n                nonTextOutputs: nonTextOutput\n            };\n        }\n\n        this.train = function(ti = null, nti = null, expectedTextOutput = \"\", expectedNonTextOutput = []) {\n            let input = null;\n            if (ti != null && nti != null) {\n                input = [];\n                for (let i = 0; i < ti.length; i++) {\n                    for (let ii = 0; ii < ti[i].length; ii++) \n                    {\n                        input.push(...this.letterToNnInput(ti[i][ii]));\n                    }\n                }\n                input = input.concat(nti);\n            }\n\n            expectedTextOutput = expectedTextOutput ? expectedTextOutput.toLowerCase() : \"\";\n            let parsedExpectedTextOutput = [];\n            for (let i = 0; i < expectedTextOutput.length; i++) {\n                parsedExpectedTextOutput.push(...this.letterMap[expectedTextOutput[i]]);\n            }\n            let expectedOutput = [...parsedExpectedTextOutput, ...expectedNonTextOutput]\n            this.nnet.train(input, expectedOutput);\n        }\n\n    }\n}\n\nfunction blankLetter() { return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; }\nfunction text(length) { \n    let text = [];\n    for (let i = 0; i < length; i++) {\n        text.push(blankLetter());\n    }\n    return text;\n}","import React from 'react';\nimport {SafeAreaView, StyleSheet, View} from 'react-native';\nimport SourceLink from './app/components/SourceLink';\nimport ScreenHeader from './app/components/ScreenHeader';\nimport GameScreen from './app/GameScreen';\n\nexport default function App() {\n  return (\n    <View>\n      <SafeAreaView>\n        <ScreenHeader />\n        <GameScreen />\n        <SourceLink />\n      </SafeAreaView>\n    </View>\n    \n  );\n}\n\nconst styles = StyleSheet.create({\n  // container: {\n  //   flex: 1,\n  //   backgroundColor: '#000',\n  // },\n});\n"],"sourceRoot":""}